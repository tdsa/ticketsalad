{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/build.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/docs/build.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/build.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/build.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/docs/build.js"}},"code":"/*******************************\n           Build Docs\n*******************************/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    map = require('map-stream'),\n    // gulp dependencies\nautoprefixer = require('gulp-autoprefixer'),\n    chmod = require('gulp-chmod'),\n    clone = require('gulp-clone'),\n    flatten = require('gulp-flatten'),\n    gulpif = require('gulp-if'),\n    header = require('gulp-header'),\n    less = require('gulp-less'),\n    minifyCSS = require('gulp-clean-css'),\n    plumber = require('gulp-plumber'),\n    print = require('gulp-print'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    uglify = require('gulp-uglify'),\n    // user config\nconfig = require('../config/docs'),\n    // install config\ntasks = require('../config/tasks'),\n    configSetup = require('../config/project/config'),\n    install = require('../config/project/install'),\n    // metadata parsing\nmetadata = require('./metadata'),\n    // shorthand\nglobs,\n    assets,\n    output,\n    source,\n    banner = tasks.banner,\n    comments = tasks.regExp.comments,\n    log = tasks.log,\n    settings = tasks.settings; // add internal tasks (concat release)\n\n\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function (callback) {\n  var stream, compressedStream, uncompressedStream; // use a different config\n\n  config = configSetup.addDerivedValues(config); // shorthand\n\n  globs = config.globs;\n  assets = config.paths.assets;\n  output = config.paths.output;\n  source = config.paths.source;\n  /*--------------\n   Parse metadata\n   ---------------*/\n  // parse all *.html.eco in docs repo, data will end up in\n  // metadata.result object.  Note this assumes that the docs\n  // repository is present and in proper directory location as\n  // specified by docs.json.\n\n  console.info('Building Metadata');\n  gulp.src(config.paths.template.eco + globs.eco).pipe(map(metadata.parser)).on('end', function () {\n    fs.writeFile(output.metadata + '/metadata.json', JSON.stringify(metadata.result, null, 2));\n  });\n  /*--------------\n    Copy Examples\n  ---------------*/\n\n  console.info('Copying examples'); // copy src/ to server\n\n  gulp.src('examples/**/*.*').pipe(gulp.dest(output.examples)).pipe(print(log.created));\n  /*--------------\n     Copy Source\n  ---------------*/\n\n  console.info('Copying LESS source'); // copy src/ to server\n\n  gulp.src('src/**/*.*').pipe(gulp.dest(output.less)).pipe(print(log.created));\n  /*--------------\n        Build\n  ---------------*/\n\n  console.info('Building Semantic for docs');\n\n  if (!install.isSetup()) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  } // unified css stream\n\n\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less').pipe(plumber()).pipe(less(settings.less)).pipe(autoprefixer(settings.prefix)).pipe(flatten()); // two concurrent streams from same source to concat release\n\n  uncompressedStream = stream.pipe(clone());\n  compressedStream = stream.pipe(clone());\n  uncompressedStream.pipe(plumber()).pipe(replace(comments.variables.in, comments.variables.out)).pipe(replace(comments.large.in, comments.large.out)).pipe(replace(comments.small.in, comments.small.out)).pipe(replace(comments.tiny.in, comments.tiny.out)).pipe(replace(assets.source, assets.uncompressed)).pipe(header(banner, settings.header)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).on('end', function () {\n    gulp.start('package uncompressed docs css');\n  });\n  compressedStream = stream.pipe(plumber()).pipe(clone()).pipe(replace(assets.source, assets.compressed)).pipe(minifyCSS(settings.minify)).pipe(rename(settings.rename.minCSS)).pipe(header(banner, settings.header)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n    callback();\n    gulp.start('package compressed docs css');\n  }); // copy assets\n\n  gulp.src(source.themes + '/**/assets/**/*.*').pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.themes)); // copy source javascript\n\n  gulp.src(source.definitions + '/**/' + globs.components + '.js').pipe(plumber()).pipe(flatten()).pipe(gulp.dest(output.uncompressed)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(print(log.created)).pipe(uglify(settings.uglify)).pipe(rename(settings.rename.minJS)).pipe(header(banner, settings.header)).pipe(gulp.dest(output.compressed)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(print(log.created)).on('end', function () {\n    gulp.start('package compressed docs js');\n    gulp.start('package uncompressed docs js');\n  });\n};","map":{"version":3,"sources":["semantic/tasks/docs/build.js"],"names":["gulp","require","console","fs","map","autoprefixer","chmod","clone","flatten","gulpif","header","less","minifyCSS","plumber","print","rename","replace","uglify","config","tasks","configSetup","install","metadata","globs","assets","output","source","banner","comments","regExp","log","settings","module","exports","callback","stream","compressedStream","uncompressedStream","addDerivedValues","paths","info","src","template","eco","pipe","parser","on","writeFile","JSON","stringify","result","dest","examples","created","isSetup","error","definitions","components","prefix","variables","in","out","large","small","tiny","uncompressed","hasPermission","permission","start","compressed","minify","minCSS","themes","minJS"],"mappings":"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","sourcesContent":["/*******************************\n           Build Docs\n*******************************/\n\nvar\n  gulp         = require('gulp'),\n\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n  map          = require('map-stream'),\n\n  // gulp dependencies\n  autoprefixer = require('gulp-autoprefixer'),\n  chmod        = require('gulp-chmod'),\n  clone        = require('gulp-clone'),\n  flatten      = require('gulp-flatten'),\n  gulpif       = require('gulp-if'),\n  header       = require('gulp-header'),\n  less         = require('gulp-less'),\n  minifyCSS    = require('gulp-clean-css'),\n  plumber      = require('gulp-plumber'),\n  print        = require('gulp-print'),\n  rename       = require('gulp-rename'),\n  replace      = require('gulp-replace'),\n  uglify       = require('gulp-uglify'),\n\n  // user config\n  config       = require('../config/docs'),\n\n  // install config\n  tasks        = require('../config/tasks'),\n  configSetup  = require('../config/project/config'),\n  install      = require('../config/project/install'),\n\n  // metadata parsing\n  metadata     = require('./metadata'),\n\n  // shorthand\n  globs,\n  assets,\n  output,\n  source,\n\n  banner       = tasks.banner,\n  comments     = tasks.regExp.comments,\n  log          = tasks.log,\n  settings     = tasks.settings\n;\n\n// add internal tasks (concat release)\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function(callback) {\n\n  var\n    stream,\n    compressedStream,\n    uncompressedStream\n  ;\n\n  // use a different config\n  config = configSetup.addDerivedValues(config);\n\n  // shorthand\n  globs  = config.globs;\n  assets = config.paths.assets;\n  output = config.paths.output;\n  source = config.paths.source;\n\n  /*--------------\n   Parse metadata\n   ---------------*/\n\n  // parse all *.html.eco in docs repo, data will end up in\n  // metadata.result object.  Note this assumes that the docs\n  // repository is present and in proper directory location as\n  // specified by docs.json.\n  console.info('Building Metadata');\n  gulp.src(config.paths.template.eco + globs.eco)\n    .pipe(map(metadata.parser))\n    .on('end', function() {\n      fs.writeFile(output.metadata + '/metadata.json', JSON.stringify(metadata.result, null, 2));\n    })\n  ;\n\n  /*--------------\n    Copy Examples\n  ---------------*/\n\n  console.info('Copying examples');\n  // copy src/ to server\n  gulp.src('examples/**/*.*')\n    .pipe(gulp.dest(output.examples))\n    .pipe(print(log.created))\n  ;\n\n  /*--------------\n     Copy Source\n  ---------------*/\n\n  console.info('Copying LESS source');\n  // copy src/ to server\n  gulp.src('src/**/*.*')\n    .pipe(gulp.dest(output.less))\n    .pipe(print(log.created))\n  ;\n\n  /*--------------\n        Build\n  ---------------*/\n\n  console.info('Building Semantic for docs');\n\n  if( !install.isSetup() ) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  }\n\n  // unified css stream\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less')\n    .pipe(plumber())\n    .pipe(less(settings.less))\n    .pipe(autoprefixer(settings.prefix))\n    .pipe(flatten())\n  ;\n\n  // two concurrent streams from same source to concat release\n  uncompressedStream = stream.pipe(clone());\n  compressedStream   = stream.pipe(clone());\n\n  uncompressedStream\n    .pipe(plumber())\n    .pipe(replace(comments.variables.in, comments.variables.out))\n    .pipe(replace(comments.large.in, comments.large.out))\n    .pipe(replace(comments.small.in, comments.small.out))\n    .pipe(replace(comments.tiny.in, comments.tiny.out))\n    .pipe(replace(assets.source, assets.uncompressed))\n    .pipe(header(banner, settings.header))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      gulp.start('package uncompressed docs css');\n    })\n  ;\n\n  compressedStream = stream\n    .pipe(plumber())\n    .pipe(clone())\n    .pipe(replace(assets.source, assets.compressed))\n    .pipe(minifyCSS(settings.minify))\n    .pipe(rename(settings.rename.minCSS))\n    .pipe(header(banner, settings.header))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      callback();\n      gulp.start('package compressed docs css');\n    })\n  ;\n\n  // copy assets\n  gulp.src(source.themes + '/**/assets/**/*.*')\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.themes))\n  ;\n\n  // copy source javascript\n  gulp.src(source.definitions + '/**/' + globs.components + '.js')\n    .pipe(plumber())\n    .pipe(flatten())\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(print(log.created))\n    .pipe(uglify(settings.uglify))\n    .pipe(rename(settings.rename.minJS))\n    .pipe(header(banner, settings.header))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(print(log.created))\n    .on('end', function() {\n      gulp.start('package compressed docs js');\n      gulp.start('package uncompressed docs js');\n    })\n  ;\n\n};\n"]},"sourceType":"script","hash":"6cb41788db7c0272a8a3f10fa6a29dc34628107e"}
