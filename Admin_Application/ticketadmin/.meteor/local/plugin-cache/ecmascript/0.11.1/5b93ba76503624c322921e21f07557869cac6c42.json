{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/config/project/config.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/config/project/config.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/config/project/config.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/config/project/config.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/config/project/config.js"}},"code":"/*******************************\n            Set-up\n*******************************/\nvar extend = require('extend'),\n    fs = require('fs'),\n    path = require('path'),\n    defaults = require('../defaults');\n/*******************************\n            Exports\n*******************************/\n\n\nmodule.exports = {\n  getPath: function (file, directory) {\n    var configPath,\n        walk = function (directory) {\n      var nextDirectory = path.resolve(path.join(directory, path.sep, '..')),\n          currentPath = path.normalize(path.join(directory, file));\n\n      if (fs.existsSync(currentPath)) {\n        // found file\n        configPath = path.normalize(directory);\n        return;\n      } else {\n        // reached file system root, let's stop\n        if (nextDirectory == directory) {\n          return;\n        } // otherwise recurse\n\n\n        walk(nextDirectory, file);\n      }\n    }; // start walk from outside require-dot-files directory\n\n\n    file = file || defaults.files.config;\n    directory = directory || path.join(__dirname, path.sep, '..');\n    walk(directory);\n    return configPath || '';\n  },\n  // adds additional derived values to a config object\n  addDerivedValues: function (config) {\n    config = config || extend(false, {}, defaults);\n    /*--------------\n       File Paths\n    ---------------*/\n\n    var configPath = this.getPath(),\n        sourcePaths = {},\n        outputPaths = {},\n        folder; // resolve paths (config location + base + path)\n\n    for (folder in config.paths.source) {\n      if (config.paths.source.hasOwnProperty(folder)) {\n        sourcePaths[folder] = path.resolve(path.join(configPath, config.base, config.paths.source[folder]));\n      }\n    }\n\n    for (folder in config.paths.output) {\n      if (config.paths.output.hasOwnProperty(folder)) {\n        outputPaths[folder] = path.resolve(path.join(configPath, config.base, config.paths.output[folder]));\n      }\n    } // set config paths to full paths\n\n\n    config.paths.source = sourcePaths;\n    config.paths.output = outputPaths; // resolve \"clean\" command path\n\n    config.paths.clean = path.resolve(path.join(configPath, config.base, config.paths.clean));\n    /*--------------\n        CSS URLs\n    ---------------*/\n    // determine asset paths in css by finding relative path between themes and output\n    // force forward slashes\n\n    config.paths.assets = {\n      source: '../../themes',\n      // source asset path is always the same\n      uncompressed: './' + path.relative(config.paths.output.uncompressed, config.paths.output.themes).replace(/\\\\/g, '/'),\n      compressed: './' + path.relative(config.paths.output.compressed, config.paths.output.themes).replace(/\\\\/g, '/'),\n      packaged: './' + path.relative(config.paths.output.packaged, config.paths.output.themes).replace(/\\\\/g, '/')\n    };\n    /*--------------\n       Permission\n    ---------------*/\n\n    if (config.permission) {\n      config.hasPermissions = true;\n    } else {\n      // pass blank object to avoid causing errors\n      config.permission = {};\n      config.hasPermissions = false;\n    }\n    /*--------------\n         Globs\n    ---------------*/\n\n\n    if (!config.globs) {\n      config.globs = {};\n    } // remove duplicates from component array\n\n\n    if (config.components instanceof Array) {\n      config.components = config.components.filter(function (component, index) {\n        return config.components.indexOf(component) == index;\n      });\n    } // takes component object and creates file glob matching selected components\n\n\n    config.globs.components = typeof config.components == 'object' ? config.components.length > 1 ? '{' + config.components.join(',') + '}' : config.components[0] : '{' + defaults.components.join(',') + '}';\n    return config;\n  }\n};","map":{"version":3,"sources":["semantic/tasks/config/project/config.js"],"names":["extend","require","fs","path","defaults","module","exports","getPath","file","directory","configPath","walk","nextDirectory","resolve","join","sep","currentPath","normalize","existsSync","files","config","__dirname","addDerivedValues","sourcePaths","outputPaths","folder","paths","source","hasOwnProperty","base","output","clean","assets","uncompressed","relative","themes","replace","compressed","packaged","permission","hasPermissions","globs","components","Array","filter","component","index","indexOf","length"],"mappings":"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","sourcesContent":["/*******************************\n            Set-up\n*******************************/\n\nvar\n  extend   = require('extend'),\n  fs       = require('fs'),\n  path     = require('path'),\n\n  defaults = require('../defaults')\n;\n\n\n/*******************************\n            Exports\n*******************************/\n\nmodule.exports = {\n\n  getPath: function(file, directory) {\n    var\n      configPath,\n      walk = function(directory) {\n        var\n          nextDirectory = path.resolve( path.join(directory, path.sep, '..') ),\n          currentPath   = path.normalize( path.join(directory, file) )\n        ;\n        if( fs.existsSync(currentPath) ) {\n          // found file\n          configPath = path.normalize(directory);\n          return;\n        }\n        else {\n          // reached file system root, let's stop\n          if(nextDirectory == directory) {\n            return;\n          }\n          // otherwise recurse\n          walk(nextDirectory, file);\n        }\n      }\n    ;\n\n    // start walk from outside require-dot-files directory\n    file      = file || defaults.files.config;\n    directory = directory || path.join(__dirname, path.sep, '..');\n    walk(directory);\n    return configPath || '';\n  },\n\n  // adds additional derived values to a config object\n  addDerivedValues: function(config) {\n\n    config = config || extend(false, {}, defaults);\n\n    /*--------------\n       File Paths\n    ---------------*/\n\n    var\n      configPath = this.getPath(),\n      sourcePaths = {},\n      outputPaths = {},\n      folder\n    ;\n\n    // resolve paths (config location + base + path)\n    for(folder in config.paths.source) {\n      if(config.paths.source.hasOwnProperty(folder)) {\n        sourcePaths[folder] = path.resolve(path.join(configPath, config.base, config.paths.source[folder]));\n      }\n    }\n    for(folder in config.paths.output) {\n      if(config.paths.output.hasOwnProperty(folder)) {\n        outputPaths[folder] = path.resolve(path.join(configPath, config.base, config.paths.output[folder]));\n      }\n    }\n\n    // set config paths to full paths\n    config.paths.source = sourcePaths;\n    config.paths.output = outputPaths;\n\n    // resolve \"clean\" command path\n    config.paths.clean = path.resolve( path.join(configPath, config.base, config.paths.clean) );\n\n    /*--------------\n        CSS URLs\n    ---------------*/\n\n    // determine asset paths in css by finding relative path between themes and output\n    // force forward slashes\n\n    config.paths.assets = {\n      source       : '../../themes', // source asset path is always the same\n      uncompressed : './' + path.relative(config.paths.output.uncompressed, config.paths.output.themes).replace(/\\\\/g, '/'),\n      compressed   : './' + path.relative(config.paths.output.compressed, config.paths.output.themes).replace(/\\\\/g, '/'),\n      packaged     : './' + path.relative(config.paths.output.packaged, config.paths.output.themes).replace(/\\\\/g, '/')\n    };\n\n    /*--------------\n       Permission\n    ---------------*/\n\n    if(config.permission) {\n      config.hasPermissions = true;\n    }\n    else {\n      // pass blank object to avoid causing errors\n      config.permission     = {};\n      config.hasPermissions = false;\n    }\n\n    /*--------------\n         Globs\n    ---------------*/\n\n    if(!config.globs) {\n      config.globs = {};\n    }\n\n    // remove duplicates from component array\n    if(config.components instanceof Array) {\n      config.components = config.components.filter(function(component, index) {\n        return config.components.indexOf(component) == index;\n      });\n    }\n\n    // takes component object and creates file glob matching selected components\n    config.globs.components = (typeof config.components == 'object')\n      ? (config.components.length > 1)\n        ? '{' + config.components.join(',') + '}'\n        : config.components[0]\n      : '{' + defaults.components.join(',') + '}'\n    ;\n\n    return config;\n\n  }\n\n};\n\n"]},"sourceType":"script","hash":"5b93ba76503624c322921e21f07557869cac6c42"}
