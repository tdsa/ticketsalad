{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/build/css.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/build/css.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/build/css.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/build/css.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/build/css.js"}},"code":"/*******************************\n          Build Task\n*******************************/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    // gulp dependencies\nautoprefixer = require('gulp-autoprefixer'),\n    chmod = require('gulp-chmod'),\n    clone = require('gulp-clone'),\n    flatten = require('gulp-flatten'),\n    gulpif = require('gulp-if'),\n    less = require('gulp-less'),\n    minifyCSS = require('gulp-clean-css'),\n    plumber = require('gulp-plumber'),\n    print = require('gulp-print'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    runSequence = require('run-sequence'),\n    // config\nconfig = require('../config/user'),\n    tasks = require('../config/tasks'),\n    install = require('../config/project/install'),\n    // shorthand\nglobs = config.globs,\n    assets = config.paths.assets,\n    output = config.paths.output,\n    source = config.paths.source,\n    banner = tasks.banner,\n    comments = tasks.regExp.comments,\n    log = tasks.log,\n    settings = tasks.settings; // add internal tasks (concat release)\n\n\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function (callback) {\n  var tasksCompleted = 0,\n      maybeCallback = function () {\n    tasksCompleted++;\n\n    if (tasksCompleted === 2) {\n      callback();\n    }\n  },\n      stream,\n      compressedStream,\n      uncompressedStream;\n\n  console.info('Building CSS');\n\n  if (!install.isSetup()) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  } // unified css stream\n\n\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less').pipe(plumber(settings.plumber.less)).pipe(less(settings.less)).pipe(autoprefixer(settings.prefix)).pipe(replace(comments.variables.in, comments.variables.out)).pipe(replace(comments.license.in, comments.license.out)).pipe(replace(comments.large.in, comments.large.out)).pipe(replace(comments.small.in, comments.small.out)).pipe(replace(comments.tiny.in, comments.tiny.out)).pipe(flatten()); // two concurrent streams from same source to concat release\n\n  uncompressedStream = stream.pipe(clone());\n  compressedStream = stream.pipe(clone()); // uncompressed component css\n\n  uncompressedStream.pipe(plumber()).pipe(replace(assets.source, assets.uncompressed)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).on('end', function () {\n    runSequence('package uncompressed css', maybeCallback);\n  }); // compressed component css\n\n  compressedStream = stream.pipe(plumber()).pipe(clone()).pipe(replace(assets.source, assets.compressed)).pipe(minifyCSS(settings.minify)).pipe(rename(settings.rename.minCSS)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n    runSequence('package compressed css', maybeCallback);\n  });\n};","map":{"version":3,"sources":["semantic/tasks/build/css.js"],"names":["gulp","require","console","fs","autoprefixer","chmod","clone","flatten","gulpif","less","minifyCSS","plumber","print","rename","replace","runSequence","config","tasks","install","globs","assets","paths","output","source","banner","comments","regExp","log","settings","module","exports","callback","tasksCompleted","maybeCallback","stream","compressedStream","uncompressedStream","info","isSetup","error","src","definitions","components","pipe","prefix","variables","in","out","license","large","small","tiny","uncompressed","hasPermission","permission","dest","created","on","compressed","minify","minCSS"],"mappings":"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","sourcesContent":["/*******************************\n          Build Task\n*******************************/\n\nvar\n  gulp         = require('gulp'),\n\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n\n  // gulp dependencies\n  autoprefixer = require('gulp-autoprefixer'),\n  chmod        = require('gulp-chmod'),\n  clone        = require('gulp-clone'),\n  flatten      = require('gulp-flatten'),\n  gulpif       = require('gulp-if'),\n  less         = require('gulp-less'),\n  minifyCSS    = require('gulp-clean-css'),\n  plumber      = require('gulp-plumber'),\n  print        = require('gulp-print'),\n  rename       = require('gulp-rename'),\n  replace      = require('gulp-replace'),\n  runSequence  = require('run-sequence'),\n\n  // config\n  config       = require('../config/user'),\n  tasks        = require('../config/tasks'),\n  install      = require('../config/project/install'),\n\n  // shorthand\n  globs        = config.globs,\n  assets       = config.paths.assets,\n  output       = config.paths.output,\n  source       = config.paths.source,\n\n  banner       = tasks.banner,\n  comments     = tasks.regExp.comments,\n  log          = tasks.log,\n  settings     = tasks.settings\n;\n\n// add internal tasks (concat release)\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function(callback) {\n\n  var\n    tasksCompleted = 0,\n    maybeCallback  = function() {\n      tasksCompleted++;\n      if(tasksCompleted === 2) {\n        callback();\n      }\n    },\n\n    stream,\n    compressedStream,\n    uncompressedStream\n  ;\n\n  console.info('Building CSS');\n\n  if( !install.isSetup() ) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  }\n\n  // unified css stream\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less')\n    .pipe(plumber(settings.plumber.less))\n    .pipe(less(settings.less))\n    .pipe(autoprefixer(settings.prefix))\n    .pipe(replace(comments.variables.in, comments.variables.out))\n    .pipe(replace(comments.license.in, comments.license.out))\n    .pipe(replace(comments.large.in, comments.large.out))\n    .pipe(replace(comments.small.in, comments.small.out))\n    .pipe(replace(comments.tiny.in, comments.tiny.out))\n    .pipe(flatten())\n  ;\n\n  // two concurrent streams from same source to concat release\n  uncompressedStream = stream.pipe(clone());\n  compressedStream   = stream.pipe(clone());\n\n  // uncompressed component css\n  uncompressedStream\n    .pipe(plumber())\n    .pipe(replace(assets.source, assets.uncompressed))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      runSequence('package uncompressed css', maybeCallback);\n    })\n  ;\n\n  // compressed component css\n  compressedStream = stream\n    .pipe(plumber())\n    .pipe(clone())\n    .pipe(replace(assets.source, assets.compressed))\n    .pipe(minifyCSS(settings.minify))\n    .pipe(rename(settings.rename.minCSS))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      runSequence('package compressed css', maybeCallback);\n    })\n  ;\n\n};\n"]},"sourceType":"script","hash":"bb4285dcfe4c568686cdca59eecf0961a545b573"}
