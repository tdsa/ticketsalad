{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/metadata.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/docs/metadata.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/metadata.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/docs/metadata.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/docs/metadata.js"}},"code":"/*******************************\n           Summarize Docs\n*******************************/\nvar // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    YAML = require('yamljs');\n\nvar data = {};\n/**\n * Test for prefix in string.\n * @param {string} str\n * @param {string} prefix\n * @return {boolean}\n */\n\nfunction startsWith(str, prefix) {\n  return str.indexOf(prefix) === 0;\n}\n\n;\n\nfunction inArray(needle, haystack) {\n  var length = haystack.length;\n\n  for (var i = 0; i < length; i++) {\n    if (haystack[i] == needle) return true;\n  }\n\n  return false;\n}\n/**\n * Parses a file for metadata and stores result in data object.\n * @param {File} file - object provided by map-stream.\n * @param {function(?,File)} - callback provided by map-stream to\n * reply when done.\n */\n\n\nfunction parser(file, callback) {\n  // file exit conditions\n  if (file.isNull()) {\n    return callback(null, file); // pass along\n  }\n\n  if (file.isStream()) {\n    return callback(new Error('Streaming not supported'));\n  }\n\n  try {\n    var\n    /** @type {string} */\n    text = String(file.contents.toString('utf8')),\n        lines = text.split('\\n'),\n        filename = file.path.substring(0, file.path.length - 4),\n        key = 'server/documents',\n        position = filename.indexOf(key); // exit conditions\n\n    if (!lines) {\n      return;\n    }\n\n    if (position < 0) {\n      return callback(null, file);\n    }\n\n    filename = filename.substring(position + key.length + 1, filename.length);\n    var lineCount = lines.length,\n        active = false,\n        yaml = [],\n        categories = ['UI Element', 'UI Global', 'UI Collection', 'UI View', 'UI Module', 'UI Behavior'],\n        index,\n        meta,\n        line;\n\n    for (index = 0; index < lineCount; index++) {\n      line = lines[index]; // Wait for metadata block to begin\n\n      if (!active) {\n        if (startsWith(line, '---')) {\n          active = true;\n        }\n\n        continue;\n      } // End of metadata block, stop parsing.\n\n\n      if (startsWith(line, '---')) {\n        break;\n      }\n\n      yaml.push(line);\n    } // Parse yaml.\n\n\n    meta = YAML.parse(yaml.join('\\n'));\n\n    if (meta && meta.type && meta.title && inArray(meta.type, categories)) {\n      meta.category = meta.type;\n      meta.filename = filename;\n      meta.url = '/' + filename;\n      meta.title = meta.title; // Primary key will by filepath\n\n      data[meta.element] = meta;\n    } else {// skip\n      // console.log(meta);\n    }\n  } catch (error) {\n    console.log(error, filename);\n  }\n\n  callback(null, file);\n}\n/**\n * Export function expected by map-stream.\n */\n\n\nmodule.exports = {\n  result: data,\n  parser: parser\n};","map":{"version":3,"sources":["semantic/tasks/docs/metadata.js"],"names":["console","require","fs","YAML","data","startsWith","str","prefix","indexOf","inArray","needle","haystack","length","i","parser","file","callback","isNull","isStream","Error","text","String","contents","toString","lines","split","filename","path","substring","key","position","lineCount","active","yaml","categories","index","meta","line","push","parse","join","type","title","category","url","element","error","log","module","exports","result"],"mappings":"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","sourcesContent":["\n/*******************************\n           Summarize Docs\n*******************************/\n\nvar\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n  YAML         = require('yamljs')\n;\n\nvar data = {};\n\n/**\n * Test for prefix in string.\n * @param {string} str\n * @param {string} prefix\n * @return {boolean}\n */\nfunction startsWith(str, prefix) {\n  return str.indexOf(prefix) === 0;\n};\n\nfunction inArray(needle, haystack) {\n  var length = haystack.length;\n  for(var i = 0; i < length; i++) {\n      if(haystack[i] == needle) return true;\n  }\n  return false;\n}\n\n/**\n * Parses a file for metadata and stores result in data object.\n * @param {File} file - object provided by map-stream.\n * @param {function(?,File)} - callback provided by map-stream to\n * reply when done.\n */\nfunction parser(file, callback) {\n  // file exit conditions\n  if(file.isNull()) {\n    return callback(null, file); // pass along\n  }\n\n  if(file.isStream()) {\n    return callback(new Error('Streaming not supported'));\n  }\n\n  try {\n\n    var\n      /** @type {string} */\n      text     = String(file.contents.toString('utf8')),\n      lines    = text.split('\\n'),\n      filename = file.path.substring(0, file.path.length - 4),\n      key      = 'server/documents',\n      position = filename.indexOf(key)\n    ;\n\n    // exit conditions\n    if(!lines) {\n      return;\n    }\n    if(position < 0) {\n      return callback(null, file);\n    }\n\n    filename = filename.substring(position + key.length + 1, filename.length);\n\n    var\n      lineCount = lines.length,\n      active    = false,\n      yaml      = [],\n      categories = [\n        'UI Element',\n        'UI Global',\n        'UI Collection',\n        'UI View',\n        'UI Module',\n        'UI Behavior'\n      ],\n      index,\n      meta,\n      line\n    ;\n\n    for(index = 0; index < lineCount; index++) {\n\n      line = lines[index];\n\n      // Wait for metadata block to begin\n      if(!active) {\n        if(startsWith(line, '---')) {\n          active = true;\n        }\n        continue;\n      }\n      // End of metadata block, stop parsing.\n      if(startsWith(line, '---')) {\n        break;\n      }\n      yaml.push(line);\n    }\n\n\n    // Parse yaml.\n    meta = YAML.parse(yaml.join('\\n'));\n    if(meta && meta.type && meta.title && inArray(meta.type, categories) ) {\n      meta.category = meta.type;\n      meta.filename = filename;\n      meta.url      = '/' + filename;\n      meta.title    = meta.title;\n      // Primary key will by filepath\n      data[meta.element] = meta;\n    }\n    else {\n      // skip\n      // console.log(meta);\n    }\n\n\n  }\n\n  catch(error) {\n    console.log(error, filename);\n  }\n\n  callback(null, file);\n\n}\n\n/**\n * Export function expected by map-stream.\n */\nmodule.exports = {\n  result : data,\n  parser : parser\n};\n"]},"sourceType":"script","hash":"ee0c7709aa7baf85c450bf1129d513717bfa35fe"}
