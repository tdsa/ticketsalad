{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/rtl/build.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/rtl/build.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/rtl/build.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/rtl/build.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/rtl/build.js"}},"code":"/*******************************\n          Build Task\n*******************************/\nvar gulp = require('gulp'),\n    // node dependencies\nfs = require('fs'),\n    // gulp dependencies\nautoprefixer = require('gulp-autoprefixer'),\n    chmod = require('gulp-chmod'),\n    clone = require('gulp-clone'),\n    flatten = require('gulp-flatten'),\n    gulpif = require('gulp-if'),\n    less = require('gulp-less'),\n    minifyCSS = require('gulp-clean-css'),\n    plumber = require('gulp-plumber'),\n    print = require('gulp-print'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    rtlcss = require('gulp-rtlcss'),\n    uglify = require('gulp-uglify'),\n    // user config\nconfig = require('../config/user'),\n    // install config\ntasks = require('../config/tasks'),\n    install = require('../config/project/install'),\n    // shorthand\nglobs = config.globs,\n    assets = config.paths.assets,\n    output = config.paths.output,\n    source = config.paths.source,\n    banner = tasks.banner,\n    comments = tasks.regExp.comments,\n    log = tasks.log,\n    settings = tasks.settings; // add internal tasks (concat release)\n\n\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function (callback) {\n  var stream, compressedStream, uncompressedStream;\n  console.info('Building Semantic');\n\n  if (!install.isSetup()) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  } // unified css stream\n\n\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less').pipe(plumber()).pipe(less(settings.less)).pipe(autoprefixer(settings.prefix)).pipe(rtlcss()).pipe(replace(comments.variables.in, comments.variables.out)).pipe(replace(comments.license.in, comments.license.out)).pipe(replace(comments.large.in, comments.large.out)).pipe(replace(comments.small.in, comments.small.out)).pipe(replace(comments.tiny.in, comments.tiny.out)).pipe(flatten()); // two concurrent streams from same source to concat release\n\n  uncompressedStream = stream.pipe(clone());\n  compressedStream = stream.pipe(clone());\n  uncompressedStream.pipe(plumber()).pipe(replace(assets.source, assets.uncompressed)).pipe(rename(settings.rename.rtlCSS)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).on('end', function () {\n    gulp.start('package uncompressed rtl css');\n  });\n  compressedStream = stream.pipe(plumber()).pipe(clone()).pipe(replace(assets.source, assets.compressed)).pipe(minifyCSS(settings.minify)).pipe(rename(settings.rename.rtlMinCSS)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n    callback();\n    gulp.start('package compressed rtl css');\n  }); // copy assets\n\n  gulp.src(source.themes + '/**/assets/**/' + globs.components + '?(s).*').pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.themes)); // copy source javascript\n\n  gulp.src(source.definitions + '/**/' + globs.components + '.js').pipe(plumber()).pipe(flatten()).pipe(replace(comments.license.in, comments.license.out)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).pipe(uglify(settings.uglify)).pipe(rename(settings.rename.minJS)).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n    gulp.start('package compressed js');\n    gulp.start('package uncompressed js');\n  });\n};","map":{"version":3,"sources":["semantic/tasks/rtl/build.js"],"names":["gulp","require","fs","autoprefixer","chmod","clone","flatten","gulpif","less","minifyCSS","plumber","print","rename","replace","rtlcss","uglify","config","tasks","install","globs","assets","paths","output","source","banner","comments","regExp","log","settings","module","exports","callback","stream","compressedStream","uncompressedStream","console","info","isSetup","error","src","definitions","components","pipe","prefix","variables","in","out","license","large","small","tiny","uncompressed","rtlCSS","hasPermission","permission","dest","created","on","start","compressed","minify","rtlMinCSS","themes","minJS"],"mappings":"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","sourcesContent":["/*******************************\n          Build Task\n*******************************/\n\nvar\n  gulp         = require('gulp'),\n\n  // node dependencies\n  fs           = require('fs'),\n\n  // gulp dependencies\n  autoprefixer = require('gulp-autoprefixer'),\n  chmod        = require('gulp-chmod'),\n  clone        = require('gulp-clone'),\n  flatten      = require('gulp-flatten'),\n  gulpif       = require('gulp-if'),\n  less         = require('gulp-less'),\n  minifyCSS    = require('gulp-clean-css'),\n  plumber      = require('gulp-plumber'),\n  print        = require('gulp-print'),\n  rename       = require('gulp-rename'),\n  replace      = require('gulp-replace'),\n  rtlcss       = require('gulp-rtlcss'),\n  uglify       = require('gulp-uglify'),\n\n  // user config\n  config       = require('../config/user'),\n\n  // install config\n  tasks        = require('../config/tasks'),\n  install      = require('../config/project/install'),\n\n  // shorthand\n  globs        = config.globs,\n  assets       = config.paths.assets,\n  output       = config.paths.output,\n  source       = config.paths.source,\n\n  banner       = tasks.banner,\n  comments     = tasks.regExp.comments,\n  log          = tasks.log,\n  settings     = tasks.settings\n;\n\n// add internal tasks (concat release)\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function(callback) {\n\n  var\n    stream,\n    compressedStream,\n    uncompressedStream\n  ;\n\n  console.info('Building Semantic');\n\n  if( !install.isSetup() ) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  }\n\n  // unified css stream\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less')\n    .pipe(plumber())\n    .pipe(less(settings.less))\n    .pipe(autoprefixer(settings.prefix))\n    .pipe(rtlcss())\n    .pipe(replace(comments.variables.in, comments.variables.out))\n    .pipe(replace(comments.license.in, comments.license.out))\n    .pipe(replace(comments.large.in, comments.large.out))\n    .pipe(replace(comments.small.in, comments.small.out))\n    .pipe(replace(comments.tiny.in, comments.tiny.out))\n    .pipe(flatten())\n  ;\n\n  // two concurrent streams from same source to concat release\n  uncompressedStream = stream.pipe(clone());\n  compressedStream   = stream.pipe(clone());\n\n  uncompressedStream\n    .pipe(plumber())\n    .pipe(replace(assets.source, assets.uncompressed))\n    .pipe(rename(settings.rename.rtlCSS))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      gulp.start('package uncompressed rtl css');\n    })\n  ;\n\n  compressedStream = stream\n    .pipe(plumber())\n    .pipe(clone())\n    .pipe(replace(assets.source, assets.compressed))\n    .pipe(minifyCSS(settings.minify))\n    .pipe(rename(settings.rename.rtlMinCSS))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      callback();\n      gulp.start('package compressed rtl css');\n    })\n  ;\n\n  // copy assets\n  gulp.src(source.themes + '/**/assets/**/' + globs.components + '?(s).*')\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.themes))\n  ;\n\n  // copy source javascript\n  gulp.src(source.definitions + '/**/' + globs.components + '.js')\n    .pipe(plumber())\n    .pipe(flatten())\n    .pipe(replace(comments.license.in, comments.license.out))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(print(log.created))\n    .pipe(uglify(settings.uglify))\n    .pipe(rename(settings.rename.minJS))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      gulp.start('package compressed js');\n      gulp.start('package uncompressed js');\n    })\n  ;\n\n};\n"]},"sourceType":"script","hash":"69a46ec58a1418bdb4bba904c83ac61130131103"}
