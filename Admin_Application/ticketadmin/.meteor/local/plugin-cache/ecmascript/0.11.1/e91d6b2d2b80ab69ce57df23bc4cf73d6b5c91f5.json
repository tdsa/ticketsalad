{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/components/update.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/admin/components/update.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/components/update.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","presets":[],"generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/components/update.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/admin/components/update.js"}},"code":"/*******************************\n          Update Repos\n*******************************/\n\n/*\n\n This task update all SUI individual component repos with new versions of components\n\n  * Commits changes from create repo\n  * Pushes changes to GitHub\n  * Tag new releases if version changed in main repo\n\n*/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    path = require('path'),\n    git = require('gulp-git'),\n    githubAPI = require('github'),\n    requireDotFile = require('require-dot-file'),\n    // admin files\ngithub = require('../../config/admin/github.js'),\n    release = require('../../config/admin/release'),\n    project = require('../../config/project/release'),\n    // oAuth configuration for GitHub\noAuth = fs.existsSync(__dirname + '/../../config/admin/oauth.js') ? require('../../config/admin/oauth') : false,\n    // shorthand\nversion = project.version;\n\nmodule.exports = function (callback) {\n  var index = -1,\n      total = release.components.length,\n      timer,\n      stream,\n      stepRepo;\n\n  if (!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  } // Do Git commands synchronously per component, to avoid issues\n\n\n  stepRepo = function () {\n    index = index + 1;\n\n    if (index >= total) {\n      callback();\n      return;\n    }\n\n    var component = release.components[index],\n        outputDirectory = path.resolve(path.join(release.outputRoot, component)),\n        capitalizedComponent = component.charAt(0).toUpperCase() + component.slice(1),\n        repoName = release.componentRepoRoot + capitalizedComponent,\n        gitURL = 'https://github.com/' + release.org + '/' + repoName + '.git',\n        repoURL = 'https://github.com/' + release.org + '/' + repoName + '/',\n        commitArgs = oAuth.name !== undefined && oAuth.email !== undefined ? '--author \"' + oAuth.name + ' <' + oAuth.email + '>\"' : '',\n        componentPackage = fs.existsSync(outputDirectory + 'package.json') ? require(outputDirectory + 'package.json') : false,\n        isNewVersion = version && componentPackage.version != version,\n        commitMessage = isNewVersion ? 'Updated component to version ' + version : 'Updated files from main repo',\n        gitOptions = {\n      cwd: outputDirectory\n    },\n        commitOptions = {\n      args: commitArgs,\n      cwd: outputDirectory\n    },\n        releaseOptions = {\n      tag_name: version,\n      owner: release.org,\n      repo: repoName\n    },\n        fileModeOptions = {\n      args: 'config core.fileMode false',\n      cwd: outputDirectory\n    },\n        usernameOptions = {\n      args: 'config user.name \"' + oAuth.name + '\"',\n      cwd: outputDirectory\n    },\n        emailOptions = {\n      args: 'config user.email \"' + oAuth.email + '\"',\n      cwd: outputDirectory\n    },\n        versionOptions = {\n      args: 'rev-parse --verify HEAD',\n      cwd: outputDirectory\n    },\n        localRepoSetup = fs.existsSync(path.join(outputDirectory, '.git')),\n        canProceed = true;\n    console.info('Processing repository:' + outputDirectory);\n\n    function setConfig() {\n      git.exec(fileModeOptions, function () {\n        git.exec(usernameOptions, function () {\n          git.exec(emailOptions, function () {\n            commitFiles();\n          });\n        });\n      });\n    } // standard path\n\n\n    function commitFiles() {\n      // commit files\n      console.info('Committing ' + component + ' files', commitArgs);\n      gulp.src('./', gitOptions).pipe(git.add(gitOptions)).pipe(git.commit(commitMessage, commitOptions)).on('error', function (error) {// canProceed = false; bug in git commit <https://github.com/stevelacy/gulp-git/issues/49>\n      }).on('finish', function (callback) {\n        if (canProceed) {\n          pushFiles();\n        } else {\n          console.info('Nothing new to commit');\n          nextRepo();\n        }\n      });\n    } // push changes to remote\n\n\n    function pushFiles() {\n      console.info('Pushing files for ' + component);\n      git.push('origin', 'master', {\n        args: '',\n        cwd: outputDirectory\n      }, function (error) {\n        console.info('Push completed successfully');\n        getSHA();\n      });\n    } // gets SHA of last commit\n\n\n    function getSHA() {\n      git.exec(versionOptions, function (error, version) {\n        version = version.trim();\n        createRelease(version);\n      });\n    } // create release on GitHub.com\n\n\n    function createRelease(version) {\n      if (version) {\n        releaseOptions.target_commitish = version;\n      }\n\n      github.repos.createRelease(releaseOptions, function () {\n        nextRepo();\n      });\n    } // Steps to next repository\n\n\n    function nextRepo() {\n      console.log('Sleeping for 1 second...'); // avoid rate throttling\n\n      global.clearTimeout(timer);\n      timer = global.setTimeout(stepRepo, 100);\n    }\n\n    if (localRepoSetup) {\n      setConfig();\n    } else {\n      console.error('Repository must be setup before running update components');\n    }\n  };\n\n  stepRepo();\n};","map":{"version":3,"sources":["semantic/tasks/admin/components/update.js"],"names":["gulp","require","console","fs","path","git","githubAPI","requireDotFile","github","release","project","oAuth","existsSync","__dirname","version","module","exports","callback","index","total","components","length","timer","stream","stepRepo","error","component","outputDirectory","resolve","join","outputRoot","capitalizedComponent","charAt","toUpperCase","slice","repoName","componentRepoRoot","gitURL","org","repoURL","commitArgs","name","undefined","email","componentPackage","isNewVersion","commitMessage","gitOptions","cwd","commitOptions","args","releaseOptions","tag_name","owner","repo","fileModeOptions","usernameOptions","emailOptions","versionOptions","localRepoSetup","canProceed","info","setConfig","exec","commitFiles","src","pipe","add","commit","on","pushFiles","nextRepo","push","getSHA","trim","createRelease","target_commitish","repos","log","global","clearTimeout","setTimeout"],"mappings":"AAAA;;;;AAIA;;;;;;;;;AAUA,IACEA,OAAiBC,QAAQ,MAAR,CADnB;AAAA,IAGE;AACAC,UAAiBD,QAAQ,gBAAR,CAJnB;AAAA,IAKEE,KAAiBF,QAAQ,IAAR,CALnB;AAAA,IAMEG,OAAiBH,QAAQ,MAAR,CANnB;AAAA,IAOEI,MAAiBJ,QAAQ,UAAR,CAPnB;AAAA,IAQEK,YAAiBL,QAAQ,QAAR,CARnB;AAAA,IASEM,iBAAiBN,QAAQ,kBAAR,CATnB;AAAA,IAWE;AACAO,SAAiBP,QAAQ,8BAAR,CAZnB;AAAA,IAaEQ,UAAiBR,QAAQ,4BAAR,CAbnB;AAAA,IAcES,UAAiBT,QAAQ,8BAAR,CAdnB;AAAA,IAiBE;AACAU,QAAiBR,GAAGS,UAAH,CAAcC,YAAY,8BAA1B,IACbZ,QAAQ,0BAAR,CADa,GAEb,KApBN;AAAA,IAsBE;AACAa,UAAUJ,QAAQI,OAvBpB;;AA0BAC,OAAOC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AAElC,MACEC,QAAQ,CAAC,CADX;AAAA,MAEEC,QAAQV,QAAQW,UAAR,CAAmBC,MAF7B;AAAA,MAGEC,KAHF;AAAA,MAIEC,MAJF;AAAA,MAKEC,QALF;;AAQA,MAAG,CAACb,KAAJ,EAAW;AACTT,YAAQuB,KAAR,CAAc,gEAAd;AACA;AACD,GAbiC,CAelC;;;AACAD,aAAW,YAAW;AAEpBN,YAAQA,QAAQ,CAAhB;;AACA,QAAGA,SAASC,KAAZ,EAAmB;AACjBF;AACA;AACD;;AAED,QACES,YAAuBjB,QAAQW,UAAR,CAAmBF,KAAnB,CADzB;AAAA,QAEES,kBAAuBvB,KAAKwB,OAAL,CAAaxB,KAAKyB,IAAL,CAAUpB,QAAQqB,UAAlB,EAA8BJ,SAA9B,CAAb,CAFzB;AAAA,QAGEK,uBAAuBL,UAAUM,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,KAAoCP,UAAUQ,KAAV,CAAgB,CAAhB,CAH7D;AAAA,QAIEC,WAAuB1B,QAAQ2B,iBAAR,GAA4BL,oBAJrD;AAAA,QAMEM,SAAuB,wBAAwB5B,QAAQ6B,GAAhC,GAAsC,GAAtC,GAA4CH,QAA5C,GAAuD,MANhF;AAAA,QAOEI,UAAuB,wBAAwB9B,QAAQ6B,GAAhC,GAAsC,GAAtC,GAA4CH,QAA5C,GAAuD,GAPhF;AAAA,QASEK,aAAc7B,MAAM8B,IAAN,KAAeC,SAAf,IAA4B/B,MAAMgC,KAAN,KAAgBD,SAA7C,GACT,eAAe/B,MAAM8B,IAArB,GAA4B,IAA5B,GAAmC9B,MAAMgC,KAAzC,GAAiD,IADxC,GAET,EAXN;AAAA,QAaEC,mBAAmBzC,GAAGS,UAAH,CAAce,kBAAkB,cAAhC,IACf1B,QAAQ0B,kBAAkB,cAA1B,CADe,GAEf,KAfN;AAAA,QAiBEkB,eAAiB/B,WAAW8B,iBAAiB9B,OAAjB,IAA4BA,OAjB1D;AAAA,QAmBEgC,gBAAiBD,YAAD,GACZ,kCAAkC/B,OADtB,GAEZ,8BArBN;AAAA,QAuBEiC,aAAkB;AAAEC,WAAKrB;AAAP,KAvBpB;AAAA,QAwBEsB,gBAAkB;AAAEC,YAAMV,UAAR;AAAoBQ,WAAKrB;AAAzB,KAxBpB;AAAA,QAyBEwB,iBAAkB;AAAEC,gBAAUtC,OAAZ;AAAqBuC,aAAO5C,QAAQ6B,GAApC;AAAyCgB,YAAMnB;AAA/C,KAzBpB;AAAA,QA2BEoB,kBAAkB;AAAEL,YAAO,4BAAT;AAAuCF,WAAKrB;AAA5C,KA3BpB;AAAA,QA4BE6B,kBAAkB;AAAEN,YAAO,uBAAuBvC,MAAM8B,IAA7B,GAAoC,GAA7C;AAAkDO,WAAKrB;AAAvD,KA5BpB;AAAA,QA6BE8B,eAAkB;AAAEP,YAAO,wBAAwBvC,MAAMgC,KAA9B,GAAsC,GAA/C;AAAoDK,WAAKrB;AAAzD,KA7BpB;AAAA,QA8BE+B,iBAAkB;AAAER,YAAO,yBAAT;AAAoCF,WAAKrB;AAAzC,KA9BpB;AAAA,QAgCEgC,iBAAkBxD,GAAGS,UAAH,CAAcR,KAAKyB,IAAL,CAAUF,eAAV,EAA2B,MAA3B,CAAd,CAhCpB;AAAA,QAiCEiC,aAAkB,IAjCpB;AAqCA1D,YAAQ2D,IAAR,CAAa,2BAA2BlC,eAAxC;;AAEA,aAASmC,SAAT,GAAqB;AACnBzD,UAAI0D,IAAJ,CAASR,eAAT,EAA0B,YAAW;AACnClD,YAAI0D,IAAJ,CAASP,eAAT,EAA0B,YAAY;AACpCnD,cAAI0D,IAAJ,CAASN,YAAT,EAAuB,YAAY;AACjCO;AACD,WAFD;AAGD,SAJD;AAKD,OAND;AAOD,KAvDmB,CA0DpB;;;AACA,aAASA,WAAT,GAAuB;AACrB;AACA9D,cAAQ2D,IAAR,CAAa,gBAAgBnC,SAAhB,GAA4B,QAAzC,EAAmDc,UAAnD;AACAxC,WAAKiE,GAAL,CAAS,IAAT,EAAelB,UAAf,EACGmB,IADH,CACQ7D,IAAI8D,GAAJ,CAAQpB,UAAR,CADR,EAEGmB,IAFH,CAEQ7D,IAAI+D,MAAJ,CAAWtB,aAAX,EAA0BG,aAA1B,CAFR,EAGGoB,EAHH,CAGM,OAHN,EAGe,UAAS5C,KAAT,EAAgB,CAC3B;AACD,OALH,EAMG4C,EANH,CAMM,QANN,EAMgB,UAASpD,QAAT,EAAmB;AAC/B,YAAG2C,UAAH,EAAe;AACbU;AACD,SAFD,MAGK;AACHpE,kBAAQ2D,IAAR,CAAa,uBAAb;AACAU;AACD;AACF,OAdH;AAgBD,KA9EmB,CAgFpB;;;AACA,aAASD,SAAT,GAAqB;AACnBpE,cAAQ2D,IAAR,CAAa,uBAAuBnC,SAApC;AACArB,UAAImE,IAAJ,CAAS,QAAT,EAAmB,QAAnB,EAA6B;AAAEtB,cAAM,EAAR;AAAYF,aAAKrB;AAAjB,OAA7B,EAAiE,UAASF,KAAT,EAAgB;AAC/EvB,gBAAQ2D,IAAR,CAAa,6BAAb;AACAY;AACD,OAHD;AAID,KAvFmB,CAyFpB;;;AACA,aAASA,MAAT,GAAkB;AAChBpE,UAAI0D,IAAJ,CAASL,cAAT,EAAyB,UAASjC,KAAT,EAAgBX,OAAhB,EAAyB;AAChDA,kBAAUA,QAAQ4D,IAAR,EAAV;AACAC,sBAAc7D,OAAd;AACD,OAHD;AAID,KA/FmB,CAiGpB;;;AACA,aAAS6D,aAAT,CAAuB7D,OAAvB,EAAgC;AAC9B,UAAGA,OAAH,EAAY;AACVqC,uBAAeyB,gBAAf,GAAkC9D,OAAlC;AACD;;AACDN,aAAOqE,KAAP,CAAaF,aAAb,CAA2BxB,cAA3B,EAA2C,YAAW;AACpDoB;AACD,OAFD;AAGD,KAzGmB,CA2GpB;;;AACA,aAASA,QAAT,GAAoB;AAClBrE,cAAQ4E,GAAR,CAAY,0BAAZ,EADkB,CAElB;;AACAC,aAAOC,YAAP,CAAoB1D,KAApB;AACAA,cAAQyD,OAAOE,UAAP,CAAkBzD,QAAlB,EAA4B,GAA5B,CAAR;AACD;;AAGD,QAAGmC,cAAH,EAAmB;AACjBG;AACD,KAFD,MAGK;AACH5D,cAAQuB,KAAR,CAAc,2DAAd;AACD;AAEF,GA3HD;;AA6HAD;AAED,CA/ID","sourcesContent":["/*******************************\n          Update Repos\n*******************************/\n\n/*\n\n This task update all SUI individual component repos with new versions of components\n\n  * Commits changes from create repo\n  * Pushes changes to GitHub\n  * Tag new releases if version changed in main repo\n\n*/\n\nvar\n  gulp           = require('gulp'),\n\n  // node dependencies\n  console        = require('better-console'),\n  fs             = require('fs'),\n  path           = require('path'),\n  git            = require('gulp-git'),\n  githubAPI      = require('github'),\n  requireDotFile = require('require-dot-file'),\n\n  // admin files\n  github         = require('../../config/admin/github.js'),\n  release        = require('../../config/admin/release'),\n  project        = require('../../config/project/release'),\n\n\n  // oAuth configuration for GitHub\n  oAuth          = fs.existsSync(__dirname + '/../../config/admin/oauth.js')\n    ? require('../../config/admin/oauth')\n    : false,\n\n  // shorthand\n  version = project.version\n;\n\nmodule.exports = function(callback) {\n\n  var\n    index = -1,\n    total = release.components.length,\n    timer,\n    stream,\n    stepRepo\n  ;\n\n  if(!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  }\n\n  // Do Git commands synchronously per component, to avoid issues\n  stepRepo = function() {\n\n    index = index + 1;\n    if(index >= total) {\n      callback();\n      return;\n    }\n\n    var\n      component            = release.components[index],\n      outputDirectory      = path.resolve(path.join(release.outputRoot, component)),\n      capitalizedComponent = component.charAt(0).toUpperCase() + component.slice(1),\n      repoName             = release.componentRepoRoot + capitalizedComponent,\n\n      gitURL               = 'https://github.com/' + release.org + '/' + repoName + '.git',\n      repoURL              = 'https://github.com/' + release.org + '/' + repoName + '/',\n\n      commitArgs = (oAuth.name !== undefined && oAuth.email !== undefined)\n        ? '--author \"' + oAuth.name + ' <' + oAuth.email + '>\"'\n        : '',\n\n      componentPackage = fs.existsSync(outputDirectory + 'package.json' )\n        ? require(outputDirectory + 'package.json')\n        : false,\n\n      isNewVersion  = (version && componentPackage.version != version),\n\n      commitMessage = (isNewVersion)\n        ? 'Updated component to version ' + version\n        : 'Updated files from main repo',\n\n      gitOptions      = { cwd: outputDirectory },\n      commitOptions   = { args: commitArgs, cwd: outputDirectory },\n      releaseOptions  = { tag_name: version, owner: release.org, repo: repoName },\n\n      fileModeOptions = { args : 'config core.fileMode false', cwd: outputDirectory },\n      usernameOptions = { args : 'config user.name \"' + oAuth.name + '\"', cwd: outputDirectory },\n      emailOptions    = { args : 'config user.email \"' + oAuth.email + '\"', cwd: outputDirectory },\n      versionOptions =  { args : 'rev-parse --verify HEAD', cwd: outputDirectory },\n\n      localRepoSetup  = fs.existsSync(path.join(outputDirectory, '.git')),\n      canProceed      = true\n    ;\n\n\n    console.info('Processing repository:' + outputDirectory);\n\n    function setConfig() {\n      git.exec(fileModeOptions, function() {\n        git.exec(usernameOptions, function () {\n          git.exec(emailOptions, function () {\n            commitFiles();\n          });\n        });\n      });\n    }\n\n\n    // standard path\n    function commitFiles() {\n      // commit files\n      console.info('Committing ' + component + ' files', commitArgs);\n      gulp.src('./', gitOptions)\n        .pipe(git.add(gitOptions))\n        .pipe(git.commit(commitMessage, commitOptions))\n        .on('error', function(error) {\n          // canProceed = false; bug in git commit <https://github.com/stevelacy/gulp-git/issues/49>\n        })\n        .on('finish', function(callback) {\n          if(canProceed) {\n            pushFiles();\n          }\n          else {\n            console.info('Nothing new to commit');\n            nextRepo();\n          }\n        })\n      ;\n    }\n\n    // push changes to remote\n    function pushFiles() {\n      console.info('Pushing files for ' + component);\n      git.push('origin', 'master', { args: '', cwd: outputDirectory }, function(error) {\n        console.info('Push completed successfully');\n        getSHA();\n      });\n    }\n\n    // gets SHA of last commit\n    function getSHA() {\n      git.exec(versionOptions, function(error, version) {\n        version = version.trim();\n        createRelease(version);\n      });\n    }\n\n    // create release on GitHub.com\n    function createRelease(version) {\n      if(version) {\n        releaseOptions.target_commitish = version;\n      }\n      github.repos.createRelease(releaseOptions, function() {\n        nextRepo();\n      });\n    }\n\n    // Steps to next repository\n    function nextRepo() {\n      console.log('Sleeping for 1 second...');\n      // avoid rate throttling\n      global.clearTimeout(timer);\n      timer = global.setTimeout(stepRepo, 100);\n    }\n\n\n    if(localRepoSetup) {\n      setConfig();\n    }\n    else {\n      console.error('Repository must be setup before running update components');\n    }\n\n  };\n\n  stepRepo();\n\n};\n"]},"sourceType":"script","hash":"e91d6b2d2b80ab69ce57df23bc4cf73d6b5c91f5"}
