{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/watch.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/watch.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/watch.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/watch.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/watch.js"}},"code":"/*******************************\n           Watch Task\n*******************************/\nvar gulp = require('gulp-help')(require('gulp')),\n    // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    // gulp dependencies\nautoprefixer = require('gulp-autoprefixer'),\n    chmod = require('gulp-chmod'),\n    clone = require('gulp-clone'),\n    gulpif = require('gulp-if'),\n    less = require('gulp-less'),\n    minifyCSS = require('gulp-clean-css'),\n    plumber = require('gulp-plumber'),\n    print = require('gulp-print'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    uglify = require('gulp-uglify'),\n    util = require('gulp-util'),\n    watch = require('gulp-watch'),\n    // user config\nconfig = require('./config/user'),\n    // task config\ntasks = require('./config/tasks'),\n    install = require('./config/project/install'),\n    // shorthand\nglobs = config.globs,\n    assets = config.paths.assets,\n    output = config.paths.output,\n    source = config.paths.source,\n    banner = tasks.banner,\n    comments = tasks.regExp.comments,\n    log = tasks.log,\n    settings = tasks.settings; // add tasks referenced using gulp.run (sub-tasks)\n\n\nif (config.rtl) {\n  require('./collections/rtl')(gulp);\n}\n\nrequire('./collections/internal')(gulp); // export task\n\n\nmodule.exports = function (callback) {\n  if (!install.isSetup()) {\n    console.error('Cannot watch files. Run \"gulp install\" to set-up Semantic');\n    return;\n  } // check for right-to-left (RTL) language\n\n\n  if (config.rtl == 'both') {\n    gulp.start('watch-rtl');\n  }\n\n  if (config.rtl === true || config.rtl === 'Yes') {\n    gulp.start('watch-rtl');\n    return;\n  } //console.clear();\n\n\n  console.log('Watching source files for changes');\n  /*--------------\n      Watch CSS\n  ---------------*/\n\n  gulp.watch([source.config, source.definitions + '/**/*.less', source.site + '/**/*.{overrides,variables}', source.themes + '/**/*.{overrides,variables}'], function (file) {\n    var lessPath, stream, compressedStream, uncompressedStream, isDefinition, isPackagedTheme, isSiteTheme, isConfig; // log modified file\n\n    gulp.src(file.path).pipe(print(log.modified));\n    /*--------------\n       Find Source\n    ---------------*/\n    // recompile on *.override , *.variable change\n\n    isConfig = file.path.indexOf('theme.config') !== -1 || file.path.indexOf('site.variables') !== -1;\n    isPackagedTheme = file.path.indexOf(source.themes) !== -1;\n    isSiteTheme = file.path.indexOf(source.site) !== -1;\n    isDefinition = file.path.indexOf(source.definitions) !== -1;\n\n    if (isConfig) {\n      console.info('Rebuilding all UI'); // impossible to tell which file was updated in theme.config, rebuild all\n\n      gulp.start('build-css');\n      return;\n    } else if (isPackagedTheme) {\n      console.log('Change detected in packaged theme');\n      lessPath = util.replaceExtension(file.path, '.less');\n      lessPath = lessPath.replace(tasks.regExp.theme, source.definitions);\n    } else if (isSiteTheme) {\n      console.log('Change detected in site theme');\n      lessPath = util.replaceExtension(file.path, '.less');\n      lessPath = lessPath.replace(source.site, source.definitions);\n    } else {\n      console.log('Change detected in definition');\n      lessPath = file.path;\n    }\n    /*--------------\n       Create CSS\n    ---------------*/\n\n\n    if (fs.existsSync(lessPath)) {\n      // unified css stream\n      stream = gulp.src(lessPath).pipe(plumber(settings.plumber.less)).pipe(less(settings.less)).pipe(print(log.created)).pipe(replace(comments.variables.in, comments.variables.out)).pipe(replace(comments.license.in, comments.license.out)).pipe(replace(comments.large.in, comments.large.out)).pipe(replace(comments.small.in, comments.small.out)).pipe(replace(comments.tiny.in, comments.tiny.out)).pipe(autoprefixer(settings.prefix)).pipe(gulpif(config.hasPermission, chmod(config.permission))); // use 2 concurrent streams from same pipe\n\n      uncompressedStream = stream.pipe(clone());\n      compressedStream = stream.pipe(clone());\n      uncompressedStream.pipe(plumber()).pipe(replace(assets.source, assets.uncompressed)).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).on('end', function () {\n        gulp.start('package uncompressed css');\n      });\n      compressedStream = stream.pipe(plumber()).pipe(replace(assets.source, assets.compressed)).pipe(minifyCSS(settings.minify)).pipe(rename(settings.rename.minCSS)).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n        gulp.start('package compressed css');\n      });\n    } else {\n      console.log('Cannot find UI definition at path', lessPath);\n    }\n  });\n  /*--------------\n      Watch JS\n  ---------------*/\n\n  gulp.watch([source.definitions + '/**/*.js'], function (file) {\n    gulp.src(file.path).pipe(plumber()).pipe(replace(comments.license.in, comments.license.out)).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.uncompressed)).pipe(print(log.created)).pipe(uglify(settings.uglify)).pipe(rename(settings.rename.minJS)).pipe(gulp.dest(output.compressed)).pipe(print(log.created)).on('end', function () {\n      gulp.start('package compressed js');\n      gulp.start('package uncompressed js');\n    });\n  });\n  /*--------------\n    Watch Assets\n  ---------------*/\n  // only copy assets that match component names (or their plural)\n\n  gulp.watch([source.themes + '/**/assets/**/*.*'], function (file) {\n    // copy assets\n    gulp.src(file.path, {\n      base: source.themes\n    }).pipe(gulpif(config.hasPermission, chmod(config.permission))).pipe(gulp.dest(output.themes)).pipe(print(log.created));\n  });\n};","map":{"version":3,"sources":["semantic/tasks/watch.js"],"names":["gulp","require","console","fs","autoprefixer","chmod","clone","gulpif","less","minifyCSS","plumber","print","rename","replace","uglify","util","watch","config","tasks","install","globs","assets","paths","output","source","banner","comments","regExp","log","settings","rtl","module","exports","callback","isSetup","error","start","definitions","site","themes","file","lessPath","stream","compressedStream","uncompressedStream","isDefinition","isPackagedTheme","isSiteTheme","isConfig","src","path","pipe","modified","indexOf","info","replaceExtension","theme","existsSync","created","variables","in","out","license","large","small","tiny","prefix","hasPermission","permission","uncompressed","dest","on","compressed","minify","minCSS","minJS","base"],"mappings":"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","sourcesContent":["/*******************************\n           Watch Task\n*******************************/\n\nvar\n  gulp         = require('gulp-help')(require('gulp')),\n\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n\n  // gulp dependencies\n  autoprefixer = require('gulp-autoprefixer'),\n  chmod        = require('gulp-chmod'),\n  clone        = require('gulp-clone'),\n  gulpif       = require('gulp-if'),\n  less         = require('gulp-less'),\n  minifyCSS    = require('gulp-clean-css'),\n  plumber      = require('gulp-plumber'),\n  print        = require('gulp-print'),\n  rename       = require('gulp-rename'),\n  replace      = require('gulp-replace'),\n  uglify       = require('gulp-uglify'),\n  util         = require('gulp-util'),\n  watch        = require('gulp-watch'),\n\n  // user config\n  config       = require('./config/user'),\n\n  // task config\n  tasks        = require('./config/tasks'),\n  install      = require('./config/project/install'),\n\n  // shorthand\n  globs        = config.globs,\n  assets       = config.paths.assets,\n  output       = config.paths.output,\n  source       = config.paths.source,\n\n  banner       = tasks.banner,\n  comments     = tasks.regExp.comments,\n  log          = tasks.log,\n  settings     = tasks.settings\n\n;\n\n// add tasks referenced using gulp.run (sub-tasks)\nif(config.rtl) {\n  require('./collections/rtl')(gulp);\n}\nrequire('./collections/internal')(gulp);\n\n\n// export task\nmodule.exports = function(callback) {\n\n  if( !install.isSetup() ) {\n    console.error('Cannot watch files. Run \"gulp install\" to set-up Semantic');\n    return;\n  }\n\n  // check for right-to-left (RTL) language\n  if(config.rtl == 'both') {\n    gulp.start('watch-rtl');\n  }\n  if(config.rtl === true || config.rtl === 'Yes') {\n    gulp.start('watch-rtl');\n    return;\n  }\n\n  //console.clear();\n  console.log('Watching source files for changes');\n\n  /*--------------\n      Watch CSS\n  ---------------*/\n\n  gulp\n    .watch([\n      source.config,\n      source.definitions   + '/**/*.less',\n      source.site          + '/**/*.{overrides,variables}',\n      source.themes        + '/**/*.{overrides,variables}'\n    ], function(file) {\n\n      var\n        lessPath,\n\n        stream,\n        compressedStream,\n        uncompressedStream,\n\n        isDefinition,\n        isPackagedTheme,\n        isSiteTheme,\n        isConfig\n      ;\n\n      // log modified file\n      gulp.src(file.path)\n        .pipe(print(log.modified))\n      ;\n\n      /*--------------\n         Find Source\n      ---------------*/\n\n      // recompile on *.override , *.variable change\n      isConfig        = (file.path.indexOf('theme.config') !== -1 || file.path.indexOf('site.variables') !== -1);\n      isPackagedTheme = (file.path.indexOf(source.themes) !== -1);\n      isSiteTheme     = (file.path.indexOf(source.site) !== -1);\n      isDefinition    = (file.path.indexOf(source.definitions) !== -1);\n\n      if(isConfig) {\n        console.info('Rebuilding all UI');\n        // impossible to tell which file was updated in theme.config, rebuild all\n        gulp.start('build-css');\n        return;\n      }\n      else if(isPackagedTheme) {\n        console.log('Change detected in packaged theme');\n        lessPath = util.replaceExtension(file.path, '.less');\n        lessPath = lessPath.replace(tasks.regExp.theme, source.definitions);\n      }\n      else if(isSiteTheme) {\n        console.log('Change detected in site theme');\n        lessPath = util.replaceExtension(file.path, '.less');\n        lessPath = lessPath.replace(source.site, source.definitions);\n      }\n      else {\n        console.log('Change detected in definition');\n        lessPath = file.path;\n      }\n\n      /*--------------\n         Create CSS\n      ---------------*/\n\n      if( fs.existsSync(lessPath) ) {\n\n        // unified css stream\n        stream = gulp.src(lessPath)\n          .pipe(plumber(settings.plumber.less))\n          .pipe(less(settings.less))\n          .pipe(print(log.created))\n          .pipe(replace(comments.variables.in, comments.variables.out))\n          .pipe(replace(comments.license.in, comments.license.out))\n          .pipe(replace(comments.large.in, comments.large.out))\n          .pipe(replace(comments.small.in, comments.small.out))\n          .pipe(replace(comments.tiny.in, comments.tiny.out))\n          .pipe(autoprefixer(settings.prefix))\n          .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n        ;\n\n        // use 2 concurrent streams from same pipe\n        uncompressedStream = stream.pipe(clone());\n        compressedStream   = stream.pipe(clone());\n\n        uncompressedStream\n          .pipe(plumber())\n          .pipe(replace(assets.source, assets.uncompressed))\n          .pipe(gulp.dest(output.uncompressed))\n          .pipe(print(log.created))\n          .on('end', function() {\n            gulp.start('package uncompressed css');\n          })\n        ;\n\n        compressedStream = stream\n          .pipe(plumber())\n          .pipe(replace(assets.source, assets.compressed))\n          .pipe(minifyCSS(settings.minify))\n          .pipe(rename(settings.rename.minCSS))\n          .pipe(gulp.dest(output.compressed))\n          .pipe(print(log.created))\n          .on('end', function() {\n            gulp.start('package compressed css');\n          })\n        ;\n      }\n      else {\n        console.log('Cannot find UI definition at path', lessPath);\n      }\n    })\n  ;\n\n  /*--------------\n      Watch JS\n  ---------------*/\n\n  gulp\n    .watch([\n      source.definitions   + '/**/*.js'\n    ], function(file) {\n      gulp.src(file.path)\n        .pipe(plumber())\n        .pipe(replace(comments.license.in, comments.license.out))\n        .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n        .pipe(gulp.dest(output.uncompressed))\n        .pipe(print(log.created))\n        .pipe(uglify(settings.uglify))\n        .pipe(rename(settings.rename.minJS))\n        .pipe(gulp.dest(output.compressed))\n        .pipe(print(log.created))\n        .on('end', function() {\n          gulp.start('package compressed js');\n          gulp.start('package uncompressed js');\n        })\n      ;\n    })\n  ;\n\n  /*--------------\n    Watch Assets\n  ---------------*/\n\n  // only copy assets that match component names (or their plural)\n  gulp\n    .watch([\n      source.themes   + '/**/assets/**/*.*'\n    ], function(file) {\n      // copy assets\n      gulp.src(file.path, { base: source.themes })\n        .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n        .pipe(gulp.dest(output.themes))\n        .pipe(print(log.created))\n      ;\n    })\n  ;\n\n};\n"]},"sourceType":"script","hash":"16783c96c8ddd97c1615c86de1eb911a35971ec8"}
