{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/install.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/install.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/install.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","presets":[],"generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/install.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/install.js"}},"code":"/*******************************\n         Install Task\n*******************************/\n\n/*\n   Install tasks\n\n   For more notes\n\n   * Runs automatically after npm update (hooks)\n   * (NPM) Install - Will ask for where to put semantic (outside pm folder)\n   * (NPM) Upgrade - Will look for semantic install, copy over files and update if new version\n   * Standard installer runs asking for paths to site files etc\n\n*/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    extend = require('extend'),\n    fs = require('fs'),\n    mkdirp = require('mkdirp'),\n    path = require('path'),\n    runSequence = require('run-sequence'),\n    // gulp dependencies\nchmod = require('gulp-chmod'),\n    del = require('del'),\n    jsonEditor = require('gulp-json-editor'),\n    plumber = require('gulp-plumber'),\n    prompt = require('prompt-sui'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    requireDotFile = require('require-dot-file'),\n    wrench = require('wrench-sui'),\n    // install config\ninstall = require('./config/project/install'),\n    // user config\nconfig = require('./config/user'),\n    // release config (name/title/etc)\nrelease = require('./config/project/release'),\n    // shorthand\nquestions = install.questions,\n    files = install.files,\n    folders = install.folders,\n    regExp = install.regExp,\n    settings = install.settings,\n    source = install.source; // Export install task\n\n\nmodule.exports = function (callback) {\n  var currentConfig = requireDotFile('semantic.json'),\n      manager = install.getPackageManager(),\n      rootQuestions = questions.root,\n      installFolder = false,\n      answers;\n  console.clear();\n  /* Test NPM install\n  manager = {\n    name : 'NPM',\n    root : path.normalize(__dirname + '/../')\n  };\n  */\n\n  /* Don't do end user config if SUI is a sub-module */\n\n  if (install.isSubModule()) {\n    console.info('SUI is a sub-module, skipping end-user install');\n    return;\n  }\n  /*-----------------\n      Update SUI\n  -----------------*/\n  // run update scripts if semantic.json exists\n\n\n  if (currentConfig && manager.name === 'NPM') {\n    var updateFolder = path.join(manager.root, currentConfig.base),\n        updatePaths = {\n      config: path.join(manager.root, files.config),\n      tasks: path.join(updateFolder, folders.tasks),\n      themeImport: path.join(updateFolder, folders.themeImport),\n      definition: path.join(currentConfig.paths.source.definitions),\n      site: path.join(currentConfig.paths.source.site),\n      theme: path.join(currentConfig.paths.source.themes),\n      defaultTheme: path.join(currentConfig.paths.source.themes, folders.defaultTheme)\n    }; // duck-type if there is a project installed\n\n    if (fs.existsSync(updatePaths.definition)) {\n      // perform update if new version\n      if (currentConfig.version !== release.version) {\n        console.log('Updating Semantic UI from ' + currentConfig.version + ' to ' + release.version);\n        console.info('Updating ui definitions...');\n        wrench.copyDirSyncRecursive(source.definitions, updatePaths.definition, settings.wrench.overwrite);\n        console.info('Updating default theme...');\n        wrench.copyDirSyncRecursive(source.themes, updatePaths.theme, settings.wrench.merge);\n        wrench.copyDirSyncRecursive(source.defaultTheme, updatePaths.defaultTheme, settings.wrench.overwrite);\n        console.info('Updating tasks...');\n        wrench.copyDirSyncRecursive(source.tasks, updatePaths.tasks, settings.wrench.overwrite);\n        console.info('Updating gulpfile.js');\n        gulp.src(source.userGulpFile).pipe(plumber()).pipe(gulp.dest(updateFolder)); // copy theme import\n\n        console.info('Updating theme import file');\n        gulp.src(source.themeImport).pipe(plumber()).pipe(gulp.dest(updatePaths.themeImport));\n        console.info('Adding new site theme files...');\n        wrench.copyDirSyncRecursive(source.site, updatePaths.site, settings.wrench.merge);\n        console.info('Updating version...'); // update version number in semantic.json\n\n        gulp.src(updatePaths.config).pipe(plumber()).pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor({\n          version: release.version\n        })).pipe(gulp.dest(manager.root));\n        console.info('Update complete! Run \"\\x1b[92mgulp build\\x1b[0m\" to rebuild dist/ files.');\n        return;\n      } else {\n        console.log('Current version of Semantic UI already installed');\n        return;\n      }\n    } else {\n      console.error('Cannot locate files to update at path: ', updatePaths.definition);\n      console.log('Running installer');\n    }\n  }\n  /*--------------\n   Determine Root\n  ---------------*/\n  // PM that supports Build Tools (NPM Only Now)\n\n\n  if (manager.name == 'NPM') {\n    rootQuestions[0].message = rootQuestions[0].message.replace('{packageMessage}', 'We detected you are using ' + manager.name + ' Nice!').replace('{root}', manager.root); // set default path to detected PM root\n\n    rootQuestions[0].default = manager.root;\n    rootQuestions[1].default = manager.root; // insert PM questions after \"Install Type\" question\n\n    Array.prototype.splice.apply(questions.setup, [2, 0].concat(rootQuestions)); // omit cleanup questions for managed install\n\n    questions.cleanup = [];\n  }\n  /*--------------\n     Create SUI\n  ---------------*/\n\n\n  gulp.task('run setup', function () {\n    // If auto-install is switched on, we skip the configuration section and simply reuse the configuration from semantic.json\n    if (install.shouldAutoInstall()) {\n      answers = {\n        overwrite: 'yes',\n        install: 'auto',\n        useRoot: true,\n        semanticRoot: currentConfig.base\n      };\n    } else {\n      return gulp.src('gulpfile.js').pipe(prompt.prompt(questions.setup, function (setupAnswers) {\n        // hoist\n        answers = setupAnswers;\n      }));\n    }\n  });\n  gulp.task('create install files', function (callback) {\n    /*--------------\n     Exit Conditions\n    ---------------*/\n    // if config exists and user specifies not to proceed\n    if (answers.overwrite !== undefined && answers.overwrite == 'no') {\n      return;\n    }\n\n    console.clear();\n\n    if (install.shouldAutoInstall()) {\n      console.log('Auto-Installing (Without User Interaction)');\n    } else {\n      console.log('Installing');\n    }\n\n    console.log('------------------------------');\n    /*--------------\n          Paths\n    ---------------*/\n\n    var installPaths = {\n      config: files.config,\n      configFolder: folders.config,\n      site: answers.site || folders.site,\n      themeConfig: files.themeConfig,\n      themeConfigFolder: folders.themeConfig\n    };\n    /*--------------\n      NPM Install\n    ---------------*/\n    // Check if PM install\n\n    if (manager && (answers.useRoot || answers.customRoot)) {\n      // Set root to custom root path if set\n      if (answers.customRoot) {\n        if (answers.customRoot === '') {\n          console.log('Unable to proceed, invalid project root');\n          return;\n        }\n\n        manager.root = answers.customRoot;\n      } // special install paths only for PM install\n\n\n      installPaths = extend(false, {}, installPaths, {\n        definition: folders.definitions,\n        lessImport: folders.lessImport,\n        tasks: folders.tasks,\n        theme: folders.themes,\n        defaultTheme: path.join(folders.themes, folders.defaultTheme),\n        themeImport: folders.themeImport\n      }); // add project root to semantic root\n\n      installFolder = path.join(manager.root, answers.semanticRoot); // add install folder to all output paths\n\n      for (var destination in installPaths) {\n        if (installPaths.hasOwnProperty(destination)) {\n          // config goes in project root, rest in install folder\n          installPaths[destination] = destination == 'config' || destination == 'configFolder' ? path.normalize(path.join(manager.root, installPaths[destination])) : path.normalize(path.join(installFolder, installPaths[destination]));\n        }\n      } // create project folders\n\n\n      try {\n        mkdirp.sync(installFolder);\n        mkdirp.sync(installPaths.definition);\n        mkdirp.sync(installPaths.theme);\n        mkdirp.sync(installPaths.tasks);\n      } catch (error) {\n        console.error('NPM does not have permissions to create folders at your specified path. Adjust your folders permissions and run \"npm install\" again');\n      }\n\n      console.log('Installing to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m');\n      console.info('Copying UI definitions');\n      wrench.copyDirSyncRecursive(source.definitions, installPaths.definition, settings.wrench.overwrite);\n      console.info('Copying UI themes');\n      wrench.copyDirSyncRecursive(source.themes, installPaths.theme, settings.wrench.merge);\n      wrench.copyDirSyncRecursive(source.defaultTheme, installPaths.defaultTheme, settings.wrench.overwrite);\n      console.info('Copying gulp tasks');\n      wrench.copyDirSyncRecursive(source.tasks, installPaths.tasks, settings.wrench.overwrite); // copy theme import\n\n      console.info('Adding theme files');\n      gulp.src(source.themeImport).pipe(plumber()).pipe(gulp.dest(installPaths.themeImport));\n      gulp.src(source.lessImport).pipe(plumber()).pipe(gulp.dest(installPaths.lessImport)); // create gulp file\n\n      console.info('Creating gulpfile.js');\n      gulp.src(source.userGulpFile).pipe(plumber()).pipe(gulp.dest(installFolder));\n    }\n    /*--------------\n       Site Theme\n    ---------------*/\n    // Copy _site templates folder to destination\n\n\n    if (fs.existsSync(installPaths.site)) {\n      console.info('Site folder exists, merging files (no overwrite)', installPaths.site);\n    } else {\n      console.info('Creating site theme folder', installPaths.site);\n    }\n\n    wrench.copyDirSyncRecursive(source.site, installPaths.site, settings.wrench.merge);\n    /*--------------\n      Theme Config\n    ---------------*/\n\n    gulp.task('create theme.config', function () {\n      var // determine path to site theme folder from theme config\n      // force CSS path variable to use forward slashes for paths\n      pathToSite = path.relative(path.resolve(installPaths.themeConfigFolder), path.resolve(installPaths.site)).replace(/\\\\/g, '/'),\n          siteVariable = \"@siteFolder   : '\" + pathToSite + \"/';\"; // rewrite site variable in theme.less\n\n      console.info('Adjusting @siteFolder to: ', pathToSite + '/');\n\n      if (fs.existsSync(installPaths.themeConfig)) {\n        console.info('Modifying src/theme.config (LESS config)', installPaths.themeConfig);\n        return gulp.src(installPaths.themeConfig).pipe(plumber()).pipe(replace(regExp.siteVariable, siteVariable)).pipe(gulp.dest(installPaths.themeConfigFolder));\n      } else {\n        console.info('Creating src/theme.config (LESS config)', installPaths.themeConfig);\n        return gulp.src(source.themeConfig).pipe(plumber()).pipe(rename({\n          extname: ''\n        })).pipe(replace(regExp.siteVariable, siteVariable)).pipe(gulp.dest(installPaths.themeConfigFolder));\n      }\n    });\n    /*--------------\n      Semantic.json\n    ---------------*/\n\n    gulp.task('create semantic.json', function () {\n      var jsonConfig = install.createJSON(answers); // adjust variables in theme.less\n\n      if (fs.existsSync(installPaths.config)) {\n        console.info('Extending config file (semantic.json)', installPaths.config);\n        return gulp.src(installPaths.config).pipe(plumber()).pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor(jsonConfig)).pipe(gulp.dest(installPaths.configFolder));\n      } else {\n        console.info('Creating config file (semantic.json)', installPaths.config);\n        return gulp.src(source.config).pipe(plumber()).pipe(rename({\n          extname: ''\n        })) // remove .template from ext\n        .pipe(jsonEditor(jsonConfig)).pipe(gulp.dest(installPaths.configFolder));\n      }\n    });\n    runSequence('create theme.config', 'create semantic.json', callback);\n  });\n  gulp.task('clean up install', function () {\n    // Completion Message\n    if (installFolder && !install.shouldAutoInstall()) {\n      console.log('\\n Setup Complete! \\n Installing Peer Dependencies. \\x1b[0;31mPlease refrain from ctrl + c\\x1b[0m... \\n After completion navigate to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m and run \"\\x1b[92mgulp build\\x1b[0m\" to build');\n      process.exit(0);\n    } else {\n      console.log('');\n      console.log('');\n    } // If auto-install is switched on, we skip the configuration section and simply build the dependencies\n\n\n    if (install.shouldAutoInstall()) {\n      return gulp.start('build');\n    } else {\n      return gulp.src('gulpfile.js').pipe(prompt.prompt(questions.cleanup, function (answers) {\n        if (answers.cleanup == 'yes') {\n          del(install.setupFiles);\n        }\n\n        if (answers.build == 'yes') {\n          gulp.start('build');\n        }\n      }));\n    }\n  });\n  runSequence('run setup', 'create install files', 'clean up install', callback);\n};","map":{"version":3,"sources":["semantic/tasks/install.js"],"names":["gulp","require","console","extend","fs","mkdirp","path","runSequence","chmod","del","jsonEditor","plumber","prompt","rename","replace","requireDotFile","wrench","install","config","release","questions","files","folders","regExp","settings","source","module","exports","callback","currentConfig","manager","getPackageManager","rootQuestions","root","installFolder","answers","clear","isSubModule","info","name","updateFolder","join","base","updatePaths","tasks","themeImport","definition","paths","definitions","site","theme","themes","defaultTheme","existsSync","version","log","copyDirSyncRecursive","overwrite","merge","src","userGulpFile","pipe","dest","json","error","message","default","Array","prototype","splice","apply","setup","concat","cleanup","task","shouldAutoInstall","useRoot","semanticRoot","setupAnswers","undefined","installPaths","configFolder","themeConfig","themeConfigFolder","customRoot","lessImport","destination","hasOwnProperty","normalize","sync","pathToSite","relative","resolve","siteVariable","extname","jsonConfig","createJSON","process","exit","start","setupFiles","build"],"mappings":"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","sourcesContent":["/*******************************\n         Install Task\n*******************************/\n\n/*\n   Install tasks\n\n   For more notes\n\n   * Runs automatically after npm update (hooks)\n   * (NPM) Install - Will ask for where to put semantic (outside pm folder)\n   * (NPM) Upgrade - Will look for semantic install, copy over files and update if new version\n   * Standard installer runs asking for paths to site files etc\n\n*/\n\nvar\n  gulp           = require('gulp'),\n\n  // node dependencies\n  console        = require('better-console'),\n  extend         = require('extend'),\n  fs             = require('fs'),\n  mkdirp         = require('mkdirp'),\n  path           = require('path'),\n  runSequence    = require('run-sequence'),\n\n  // gulp dependencies\n  chmod          = require('gulp-chmod'),\n  del            = require('del'),\n  jsonEditor     = require('gulp-json-editor'),\n  plumber        = require('gulp-plumber'),\n  prompt         = require('prompt-sui'),\n  rename         = require('gulp-rename'),\n  replace        = require('gulp-replace'),\n  requireDotFile = require('require-dot-file'),\n  wrench         = require('wrench-sui'),\n\n  // install config\n  install        = require('./config/project/install'),\n\n  // user config\n  config         = require('./config/user'),\n\n  // release config (name/title/etc)\n  release        = require('./config/project/release'),\n\n  // shorthand\n  questions      = install.questions,\n  files          = install.files,\n  folders        = install.folders,\n  regExp         = install.regExp,\n  settings       = install.settings,\n  source         = install.source\n;\n\n// Export install task\nmodule.exports = function (callback) {\n\nvar\n  currentConfig = requireDotFile('semantic.json'),\n  manager       = install.getPackageManager(),\n  rootQuestions = questions.root,\n  installFolder = false,\n  answers\n;\n\nconsole.clear();\n\n/* Test NPM install\nmanager = {\n  name : 'NPM',\n  root : path.normalize(__dirname + '/../')\n};\n*/\n\n\n/* Don't do end user config if SUI is a sub-module */\nif( install.isSubModule() ) {\n  console.info('SUI is a sub-module, skipping end-user install');\n  return;\n}\n\n/*-----------------\n    Update SUI\n-----------------*/\n\n// run update scripts if semantic.json exists\nif(currentConfig && manager.name === 'NPM') {\n\n  var\n    updateFolder = path.join(manager.root, currentConfig.base),\n    updatePaths  = {\n      config       : path.join(manager.root, files.config),\n      tasks        : path.join(updateFolder, folders.tasks),\n      themeImport  : path.join(updateFolder, folders.themeImport),\n      definition   : path.join(currentConfig.paths.source.definitions),\n      site         : path.join(currentConfig.paths.source.site),\n      theme        : path.join(currentConfig.paths.source.themes),\n      defaultTheme : path.join(currentConfig.paths.source.themes, folders.defaultTheme)\n    }\n  ;\n\n  // duck-type if there is a project installed\n  if( fs.existsSync(updatePaths.definition) ) {\n\n    // perform update if new version\n    if(currentConfig.version !== release.version) {\n      console.log('Updating Semantic UI from ' + currentConfig.version + ' to ' + release.version);\n\n      console.info('Updating ui definitions...');\n      wrench.copyDirSyncRecursive(source.definitions, updatePaths.definition, settings.wrench.overwrite);\n\n      console.info('Updating default theme...');\n      wrench.copyDirSyncRecursive(source.themes, updatePaths.theme, settings.wrench.merge);\n      wrench.copyDirSyncRecursive(source.defaultTheme, updatePaths.defaultTheme, settings.wrench.overwrite);\n\n      console.info('Updating tasks...');\n      wrench.copyDirSyncRecursive(source.tasks, updatePaths.tasks, settings.wrench.overwrite);\n\n      console.info('Updating gulpfile.js');\n      gulp.src(source.userGulpFile)\n        .pipe(plumber())\n        .pipe(gulp.dest(updateFolder))\n      ;\n\n      // copy theme import\n      console.info('Updating theme import file');\n      gulp.src(source.themeImport)\n        .pipe(plumber())\n        .pipe(gulp.dest(updatePaths.themeImport))\n      ;\n\n      console.info('Adding new site theme files...');\n      wrench.copyDirSyncRecursive(source.site, updatePaths.site, settings.wrench.merge);\n\n      console.info('Updating version...');\n\n      // update version number in semantic.json\n      gulp.src(updatePaths.config)\n        .pipe(plumber())\n        .pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor({\n          version: release.version\n        }))\n        .pipe(gulp.dest(manager.root))\n      ;\n\n      console.info('Update complete! Run \"\\x1b[92mgulp build\\x1b[0m\" to rebuild dist/ files.');\n\n      return;\n    }\n    else {\n      console.log('Current version of Semantic UI already installed');\n      return;\n    }\n\n  }\n  else {\n    console.error('Cannot locate files to update at path: ', updatePaths.definition);\n    console.log('Running installer');\n  }\n\n}\n\n/*--------------\n Determine Root\n---------------*/\n\n// PM that supports Build Tools (NPM Only Now)\nif(manager.name == 'NPM') {\n  rootQuestions[0].message = rootQuestions[0].message\n    .replace('{packageMessage}', 'We detected you are using ' + manager.name + ' Nice!')\n    .replace('{root}', manager.root)\n  ;\n  // set default path to detected PM root\n  rootQuestions[0].default = manager.root;\n  rootQuestions[1].default = manager.root;\n\n  // insert PM questions after \"Install Type\" question\n  Array.prototype.splice.apply(questions.setup, [2, 0].concat(rootQuestions));\n\n  // omit cleanup questions for managed install\n  questions.cleanup = [];\n}\n\n\n/*--------------\n   Create SUI\n---------------*/\n\ngulp.task('run setup', function() {\n\n  // If auto-install is switched on, we skip the configuration section and simply reuse the configuration from semantic.json\n  if(install.shouldAutoInstall()) {\n    answers = {\n      overwrite    : 'yes',\n      install      : 'auto',\n      useRoot      : true,\n      semanticRoot : currentConfig.base\n    };\n  }\n  else {\n    return gulp\n      .src('gulpfile.js')\n      .pipe(prompt.prompt(questions.setup, function(setupAnswers) {\n        // hoist\n        answers = setupAnswers;\n      }))\n    ;\n  }\n});\n\ngulp.task('create install files', function(callback) {\n\n  /*--------------\n   Exit Conditions\n  ---------------*/\n\n  // if config exists and user specifies not to proceed\n  if(answers.overwrite !== undefined && answers.overwrite == 'no') {\n    return;\n  }\n  console.clear();\n  if(install.shouldAutoInstall()) {\n    console.log('Auto-Installing (Without User Interaction)');\n  }\n  else {\n    console.log('Installing');\n  }\n  console.log('------------------------------');\n\n\n  /*--------------\n        Paths\n  ---------------*/\n\n  var\n    installPaths = {\n      config            : files.config,\n      configFolder      : folders.config,\n      site              : answers.site || folders.site,\n      themeConfig       : files.themeConfig,\n      themeConfigFolder : folders.themeConfig\n    }\n  ;\n\n  /*--------------\n    NPM Install\n  ---------------*/\n\n  // Check if PM install\n  if(manager && (answers.useRoot || answers.customRoot)) {\n\n    // Set root to custom root path if set\n    if(answers.customRoot) {\n      if(answers.customRoot === '') {\n        console.log('Unable to proceed, invalid project root');\n        return;\n      }\n      manager.root = answers.customRoot;\n    }\n\n    // special install paths only for PM install\n    installPaths = extend(false, {}, installPaths, {\n      definition   : folders.definitions,\n      lessImport   : folders.lessImport,\n      tasks        : folders.tasks,\n      theme        : folders.themes,\n      defaultTheme : path.join(folders.themes, folders.defaultTheme),\n      themeImport  : folders.themeImport\n    });\n\n    // add project root to semantic root\n    installFolder = path.join(manager.root, answers.semanticRoot);\n\n    // add install folder to all output paths\n    for(var destination in installPaths) {\n      if( installPaths.hasOwnProperty(destination) ) {\n        // config goes in project root, rest in install folder\n        installPaths[destination] = (destination == 'config' || destination == 'configFolder')\n          ? path.normalize( path.join(manager.root, installPaths[destination]) )\n          : path.normalize( path.join(installFolder, installPaths[destination]) )\n        ;\n      }\n    }\n\n    // create project folders\n    try {\n      mkdirp.sync(installFolder);\n      mkdirp.sync(installPaths.definition);\n      mkdirp.sync(installPaths.theme);\n      mkdirp.sync(installPaths.tasks);\n    }\n    catch(error) {\n      console.error('NPM does not have permissions to create folders at your specified path. Adjust your folders permissions and run \"npm install\" again');\n    }\n\n    console.log('Installing to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m');\n\n    console.info('Copying UI definitions');\n    wrench.copyDirSyncRecursive(source.definitions, installPaths.definition, settings.wrench.overwrite);\n\n    console.info('Copying UI themes');\n    wrench.copyDirSyncRecursive(source.themes, installPaths.theme, settings.wrench.merge);\n    wrench.copyDirSyncRecursive(source.defaultTheme, installPaths.defaultTheme, settings.wrench.overwrite);\n\n    console.info('Copying gulp tasks');\n    wrench.copyDirSyncRecursive(source.tasks, installPaths.tasks, settings.wrench.overwrite);\n\n    // copy theme import\n    console.info('Adding theme files');\n    gulp.src(source.themeImport)\n      .pipe(plumber())\n      .pipe(gulp.dest(installPaths.themeImport))\n    ;\n    gulp.src(source.lessImport)\n      .pipe(plumber())\n      .pipe(gulp.dest(installPaths.lessImport))\n    ;\n\n    // create gulp file\n    console.info('Creating gulpfile.js');\n    gulp.src(source.userGulpFile)\n      .pipe(plumber())\n      .pipe(gulp.dest(installFolder))\n    ;\n\n  }\n\n\n  /*--------------\n     Site Theme\n  ---------------*/\n\n  // Copy _site templates folder to destination\n  if( fs.existsSync(installPaths.site) ) {\n    console.info('Site folder exists, merging files (no overwrite)', installPaths.site);\n  }\n  else {\n    console.info('Creating site theme folder', installPaths.site);\n  }\n  wrench.copyDirSyncRecursive(source.site, installPaths.site, settings.wrench.merge);\n\n  /*--------------\n    Theme Config\n  ---------------*/\n\n  gulp.task('create theme.config', function() {\n    var\n      // determine path to site theme folder from theme config\n      // force CSS path variable to use forward slashes for paths\n      pathToSite   = path.relative(path.resolve(installPaths.themeConfigFolder), path.resolve(installPaths.site)).replace(/\\\\/g,'/'),\n      siteVariable = \"@siteFolder   : '\" + pathToSite + \"/';\"\n    ;\n\n    // rewrite site variable in theme.less\n    console.info('Adjusting @siteFolder to: ', pathToSite + '/');\n\n    if(fs.existsSync(installPaths.themeConfig)) {\n      console.info('Modifying src/theme.config (LESS config)', installPaths.themeConfig);\n      return gulp.src(installPaths.themeConfig)\n        .pipe(plumber())\n        .pipe(replace(regExp.siteVariable, siteVariable))\n        .pipe(gulp.dest(installPaths.themeConfigFolder))\n      ;\n    }\n    else {\n      console.info('Creating src/theme.config (LESS config)', installPaths.themeConfig);\n      return gulp.src(source.themeConfig)\n        .pipe(plumber())\n        .pipe(rename({ extname : '' }))\n        .pipe(replace(regExp.siteVariable, siteVariable))\n        .pipe(gulp.dest(installPaths.themeConfigFolder))\n      ;\n    }\n  });\n\n  /*--------------\n    Semantic.json\n  ---------------*/\n\n  gulp.task('create semantic.json', function() {\n\n    var\n      jsonConfig = install.createJSON(answers)\n    ;\n\n    // adjust variables in theme.less\n    if( fs.existsSync(installPaths.config) ) {\n      console.info('Extending config file (semantic.json)', installPaths.config);\n      return gulp.src(installPaths.config)\n        .pipe(plumber())\n        .pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor(jsonConfig))\n        .pipe(gulp.dest(installPaths.configFolder))\n      ;\n    }\n    else {\n      console.info('Creating config file (semantic.json)', installPaths.config);\n      return gulp.src(source.config)\n        .pipe(plumber())\n        .pipe(rename({ extname : '' })) // remove .template from ext\n        .pipe(jsonEditor(jsonConfig))\n        .pipe(gulp.dest(installPaths.configFolder))\n      ;\n    }\n\n  });\n\n  runSequence(\n    'create theme.config',\n    'create semantic.json',\n    callback\n  );\n\n});\n\ngulp.task('clean up install', function() {\n\n  // Completion Message\n  if(installFolder && !install.shouldAutoInstall()) {\n    console.log('\\n Setup Complete! \\n Installing Peer Dependencies. \\x1b[0;31mPlease refrain from ctrl + c\\x1b[0m... \\n After completion navigate to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m and run \"\\x1b[92mgulp build\\x1b[0m\" to build');\n    process.exit(0);\n  }\n  else {\n    console.log('');\n    console.log('');\n  }\n\n  // If auto-install is switched on, we skip the configuration section and simply build the dependencies\n  if(install.shouldAutoInstall()) {\n    return gulp.start('build');\n  }\n  else {\n    return gulp\n      .src('gulpfile.js')\n      .pipe(prompt.prompt(questions.cleanup, function(answers) {\n        if(answers.cleanup == 'yes') {\n          del(install.setupFiles);\n        }\n        if(answers.build == 'yes') {\n          gulp.start('build');\n        }\n      }))\n    ;\n  }\n\n\n});\n\nrunSequence(\n  'run setup',\n  'create install files',\n  'clean up install',\n  callback\n);\n\n};\n"]},"sourceType":"script","hash":"3b079518726f4cc92cbce240d962e108f294ca08"}
