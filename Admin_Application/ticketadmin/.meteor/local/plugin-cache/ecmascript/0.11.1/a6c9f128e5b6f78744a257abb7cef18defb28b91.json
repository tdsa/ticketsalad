{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/update.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/admin/distributions/update.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/update.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","presets":[],"generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/update.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/admin/distributions/update.js"}},"code":"/*******************************\n          Update Repos\n*******************************/\n\n/*\n\n This task update all SUI individual distribution repos with new versions of distributions\n\n  * Commits changes from create repo\n  * Pushes changes to GitHub\n  * Tag new releases if version changed in main repo\n\n*/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    fs = require('fs'),\n    path = require('path'),\n    git = require('gulp-git'),\n    githubAPI = require('github'),\n    requireDotFile = require('require-dot-file'),\n    // admin files\ngithub = require('../../config/admin/github.js'),\n    release = require('../../config/admin/release'),\n    project = require('../../config/project/release'),\n    // oAuth configuration for GitHub\noAuth = fs.existsSync(__dirname + '/../../config/admin/oauth.js') ? require('../../config/admin/oauth') : false,\n    // shorthand\nversion = project.version;\n\nmodule.exports = function (callback) {\n  var index = -1,\n      total = release.distributions.length,\n      timer,\n      stream,\n      stepRepo;\n\n  if (!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  } // Do Git commands synchronously per distribution, to avoid issues\n\n\n  stepRepo = function () {\n    index = index + 1;\n\n    if (index >= total) {\n      callback();\n      return;\n    }\n\n    var distribution = release.distributions[index],\n        outputDirectory = path.resolve(path.join(release.outputRoot, distribution.toLowerCase())),\n        repoName = release.distRepoRoot + distribution,\n        commitArgs = oAuth.name !== undefined && oAuth.email !== undefined ? '--author \"' + oAuth.name + ' <' + oAuth.email + '>\"' : '',\n        distributionPackage = fs.existsSync(outputDirectory + 'package.json') ? require(outputDirectory + 'package.json') : false,\n        isNewVersion = version && distributionPackage.version != version,\n        commitMessage = isNewVersion ? 'Updated distribution to version ' + version : 'Updated files from main repo',\n        gitOptions = {\n      cwd: outputDirectory\n    },\n        commitOptions = {\n      args: commitArgs,\n      cwd: outputDirectory\n    },\n        releaseOptions = {\n      tag_name: version,\n      owner: release.org,\n      repo: repoName\n    },\n        fileModeOptions = {\n      args: 'config core.fileMode false',\n      cwd: outputDirectory\n    },\n        usernameOptions = {\n      args: 'config user.name \"' + oAuth.name + '\"',\n      cwd: outputDirectory\n    },\n        emailOptions = {\n      args: 'config user.email \"' + oAuth.email + '\"',\n      cwd: outputDirectory\n    },\n        versionOptions = {\n      args: 'rev-parse --verify HEAD',\n      cwd: outputDirectory\n    },\n        localRepoSetup = fs.existsSync(path.join(outputDirectory, '.git')),\n        canProceed = true;\n    console.info('Processing repository:' + outputDirectory);\n\n    function setConfig() {\n      git.exec(fileModeOptions, function () {\n        git.exec(usernameOptions, function () {\n          git.exec(emailOptions, function () {\n            commitFiles();\n          });\n        });\n      });\n    } // standard path\n\n\n    function commitFiles() {\n      // commit files\n      console.info('Committing ' + distribution + ' files', commitArgs);\n      gulp.src('./', gitOptions).pipe(git.add(gitOptions)).pipe(git.commit(commitMessage, commitOptions)).on('error', function (error) {// canProceed = false; bug in git commit <https://github.com/stevelacy/gulp-git/issues/49>\n      }).on('finish', function (callback) {\n        if (canProceed) {\n          pushFiles();\n        } else {\n          console.info('Nothing new to commit');\n          nextRepo();\n        }\n      });\n    } // push changes to remote\n\n\n    function pushFiles() {\n      console.info('Pushing files for ' + distribution);\n      git.push('origin', 'master', {\n        args: '',\n        cwd: outputDirectory\n      }, function (error) {\n        console.info('Push completed successfully');\n        getSHA();\n      });\n    } // gets SHA of last commit\n\n\n    function getSHA() {\n      git.exec(versionOptions, function (error, version) {\n        version = version.trim();\n        createRelease(version);\n      });\n    } // create release on GitHub.com\n\n\n    function createRelease(version) {\n      if (version) {\n        releaseOptions.target_commitish = version;\n      }\n\n      github.repos.createRelease(releaseOptions, function () {\n        nextRepo();\n      });\n    } // Steps to next repository\n\n\n    function nextRepo() {\n      console.log('Sleeping for 1 second...'); // avoid rate throttling\n\n      global.clearTimeout(timer);\n      timer = global.setTimeout(stepRepo, 100);\n    }\n\n    if (localRepoSetup) {\n      setConfig();\n    } else {\n      console.error('Repository must be setup before running update distributions');\n    }\n  };\n\n  stepRepo();\n};","map":{"version":3,"sources":["semantic/tasks/admin/distributions/update.js"],"names":["gulp","require","console","fs","path","git","githubAPI","requireDotFile","github","release","project","oAuth","existsSync","__dirname","version","module","exports","callback","index","total","distributions","length","timer","stream","stepRepo","error","distribution","outputDirectory","resolve","join","outputRoot","toLowerCase","repoName","distRepoRoot","commitArgs","name","undefined","email","distributionPackage","isNewVersion","commitMessage","gitOptions","cwd","commitOptions","args","releaseOptions","tag_name","owner","org","repo","fileModeOptions","usernameOptions","emailOptions","versionOptions","localRepoSetup","canProceed","info","setConfig","exec","commitFiles","src","pipe","add","commit","on","pushFiles","nextRepo","push","getSHA","trim","createRelease","target_commitish","repos","log","global","clearTimeout","setTimeout"],"mappings":"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","sourcesContent":["/*******************************\n          Update Repos\n*******************************/\n\n/*\n\n This task update all SUI individual distribution repos with new versions of distributions\n\n  * Commits changes from create repo\n  * Pushes changes to GitHub\n  * Tag new releases if version changed in main repo\n\n*/\n\nvar\n  gulp           = require('gulp'),\n\n  // node dependencies\n  console        = require('better-console'),\n  fs             = require('fs'),\n  path           = require('path'),\n  git            = require('gulp-git'),\n  githubAPI      = require('github'),\n  requireDotFile = require('require-dot-file'),\n\n  // admin files\n  github         = require('../../config/admin/github.js'),\n  release        = require('../../config/admin/release'),\n  project        = require('../../config/project/release'),\n\n\n  // oAuth configuration for GitHub\n  oAuth          = fs.existsSync(__dirname + '/../../config/admin/oauth.js')\n    ? require('../../config/admin/oauth')\n    : false,\n\n  // shorthand\n  version = project.version\n;\n\nmodule.exports = function(callback) {\n\n  var\n    index = -1,\n    total = release.distributions.length,\n    timer,\n    stream,\n    stepRepo\n  ;\n\n  if(!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  }\n\n  // Do Git commands synchronously per distribution, to avoid issues\n  stepRepo = function() {\n\n    index = index + 1;\n    if(index >= total) {\n      callback();\n      return;\n    }\n\n    var\n      distribution         = release.distributions[index],\n      outputDirectory      = path.resolve(path.join(release.outputRoot, distribution.toLowerCase() )),\n      repoName             = release.distRepoRoot + distribution,\n\n      commitArgs = (oAuth.name !== undefined && oAuth.email !== undefined)\n        ? '--author \"' + oAuth.name + ' <' + oAuth.email + '>\"'\n        : '',\n\n      distributionPackage = fs.existsSync(outputDirectory + 'package.json' )\n        ? require(outputDirectory + 'package.json')\n        : false,\n\n      isNewVersion  = (version && distributionPackage.version != version),\n\n      commitMessage = (isNewVersion)\n        ? 'Updated distribution to version ' + version\n        : 'Updated files from main repo',\n\n      gitOptions      = { cwd: outputDirectory },\n      commitOptions   = { args: commitArgs, cwd: outputDirectory },\n      releaseOptions  = { tag_name: version, owner: release.org, repo: repoName },\n\n      fileModeOptions = { args : 'config core.fileMode false', cwd: outputDirectory },\n      usernameOptions = { args : 'config user.name \"' + oAuth.name + '\"', cwd: outputDirectory },\n      emailOptions    = { args : 'config user.email \"' + oAuth.email + '\"', cwd: outputDirectory },\n      versionOptions =  { args : 'rev-parse --verify HEAD', cwd: outputDirectory },\n\n      localRepoSetup  = fs.existsSync(path.join(outputDirectory, '.git')),\n      canProceed      = true\n    ;\n\n\n    console.info('Processing repository:' + outputDirectory);\n\n    function setConfig() {\n      git.exec(fileModeOptions, function() {\n        git.exec(usernameOptions, function () {\n          git.exec(emailOptions, function () {\n            commitFiles();\n          });\n        });\n      });\n    }\n\n    // standard path\n    function commitFiles() {\n      // commit files\n      console.info('Committing ' + distribution + ' files', commitArgs);\n      gulp.src('./', gitOptions)\n        .pipe(git.add(gitOptions))\n        .pipe(git.commit(commitMessage, commitOptions))\n        .on('error', function(error) {\n          // canProceed = false; bug in git commit <https://github.com/stevelacy/gulp-git/issues/49>\n        })\n        .on('finish', function(callback) {\n          if(canProceed) {\n            pushFiles();\n          }\n          else {\n            console.info('Nothing new to commit');\n            nextRepo();\n          }\n        })\n      ;\n    }\n\n    // push changes to remote\n    function pushFiles() {\n      console.info('Pushing files for ' + distribution);\n      git.push('origin', 'master', { args: '', cwd: outputDirectory }, function(error) {\n        console.info('Push completed successfully');\n        getSHA();\n      });\n    }\n\n    // gets SHA of last commit\n    function getSHA() {\n      git.exec(versionOptions, function(error, version) {\n        version = version.trim();\n        createRelease(version);\n      });\n    }\n\n    // create release on GitHub.com\n    function createRelease(version) {\n      if(version) {\n        releaseOptions.target_commitish = version;\n      }\n      github.repos.createRelease(releaseOptions, function() {\n        nextRepo();\n      });\n    }\n\n    // Steps to next repository\n    function nextRepo() {\n      console.log('Sleeping for 1 second...');\n      // avoid rate throttling\n      global.clearTimeout(timer);\n      timer = global.setTimeout(stepRepo, 100);\n    }\n\n\n    if(localRepoSetup) {\n      setConfig();\n    }\n    else {\n      console.error('Repository must be setup before running update distributions');\n    }\n\n  };\n\n  stepRepo();\n\n};\n"]},"sourceType":"script","hash":"a6c9f128e5b6f78744a257abb7cef18defb28b91"}
