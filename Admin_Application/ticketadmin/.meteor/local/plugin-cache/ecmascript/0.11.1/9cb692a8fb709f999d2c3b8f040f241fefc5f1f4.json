{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/create.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"semantic/tasks/admin/distributions/create.js","filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/create.js","passPerPreset":false,"envName":"development","cwd":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","root":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin","generatorOpts":{"filename":"/Users/tristan/Documents/Uni/2018/Semester 2/COS 301/Group Project/TicketSalad/ticketsalad/Admin_Application/ticketadmin/semantic/tasks/admin/distributions/create.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"semantic/tasks/admin/distributions/create.js"}},"code":"/*******************************\n     Create Distributions\n*******************************/\n\n/*\n This will create individual distribution repositories for each SUI distribution\n\n  * copy distribution files to release\n  * update package.json file\n*/\nvar gulp = require('gulp'),\n    // node dependencies\nconsole = require('better-console'),\n    del = require('del'),\n    fs = require('fs'),\n    path = require('path'),\n    runSequence = require('run-sequence'),\n    mergeStream = require('merge-stream'),\n    // admin dependencies\nconcatFileNames = require('gulp-concat-filenames'),\n    debug = require('gulp-debug'),\n    flatten = require('gulp-flatten'),\n    git = require('gulp-git'),\n    jsonEditor = require('gulp-json-editor'),\n    plumber = require('gulp-plumber'),\n    rename = require('gulp-rename'),\n    replace = require('gulp-replace'),\n    tap = require('gulp-tap'),\n    // config\nconfig = require('../../config/user'),\n    release = require('../../config/admin/release'),\n    project = require('../../config/project/release'),\n    // shorthand\nversion = project.version,\n    output = config.paths.output;\n\nmodule.exports = function (callback) {\n  var stream,\n      index,\n      tasks = [];\n\n  for (index in release.distributions) {\n    var distribution = release.distributions[index]; // streams... designed to save time and make coding fun...\n\n    (function (distribution) {\n      var distLowerCase = distribution.toLowerCase(),\n          outputDirectory = path.join(release.outputRoot, distLowerCase),\n          packageFile = path.join(outputDirectory, release.files.npm),\n          repoName = release.distRepoRoot + distribution,\n          regExp = {\n        match: {\n          files: '{files}',\n          version: '{version}'\n        }\n      },\n          task = {\n        all: distribution + ' copying files',\n        repo: distribution + ' create repo',\n        meteor: distribution + ' create meteor package.js',\n        package: distribution + ' create package.json'\n      },\n          gatherFiles,\n          createList; // get files for meteor\n\n      gatherFiles = function (dir) {\n        var dir = dir || path.resolve('.'),\n            list = fs.readdirSync(dir),\n            omitted = ['.git', 'node_modules', 'package.js', 'LICENSE', 'README.md', 'package.json', 'bower.json', '.gitignore'],\n            files = [];\n        list.forEach(function (file) {\n          var isOmitted = omitted.indexOf(file) > -1,\n              filePath = path.join(dir, file),\n              stat = fs.statSync(filePath);\n\n          if (!isOmitted) {\n            if (stat && stat.isDirectory()) {\n              files = files.concat(gatherFiles(filePath));\n            } else {\n              files.push(filePath.replace(outputDirectory + path.sep, ''));\n            }\n          }\n        });\n        return files;\n      }; // spaces out list correctly\n\n\n      createList = function (files) {\n        var filenames = '';\n\n        for (var file in files) {\n          if (file == files.length - 1) {\n            filenames += \"'\" + files[file] + \"'\";\n          } else {\n            filenames += \"'\" + files[file] + \"',\\n    \";\n          }\n        }\n\n        return filenames;\n      };\n\n      gulp.task(task.meteor, function () {\n        var files = gatherFiles(outputDirectory),\n            filenames = createList(files);\n        gulp.src(release.templates.meteor[distLowerCase]).pipe(plumber()).pipe(flatten()).pipe(replace(regExp.match.version, version)).pipe(replace(regExp.match.files, filenames)).pipe(rename(release.files.meteor)).pipe(gulp.dest(outputDirectory));\n      });\n\n      if (distribution == 'CSS') {\n        gulp.task(task.repo, function () {\n          var themes, components, releases;\n          themes = gulp.src('dist/themes/default/**/*', {\n            base: 'dist/'\n          }).pipe(gulp.dest(outputDirectory));\n          components = gulp.src('dist/components/*', {\n            base: 'dist/'\n          }).pipe(gulp.dest(outputDirectory));\n          releases = gulp.src('dist/*', {\n            base: 'dist/'\n          }).pipe(gulp.dest(outputDirectory));\n          return mergeStream(themes, components, releases);\n        });\n      } else if (distribution == 'LESS') {\n        gulp.task(task.repo, function () {\n          var definitions, themeImport, themeConfig, siteTheme, themes;\n          definitions = gulp.src('src/definitions/**/*', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          themeImport = gulp.src('src/semantic.less', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          themeImport = gulp.src('src/theme.less', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          themeConfig = gulp.src('src/theme.config.example', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          siteTheme = gulp.src('src/_site/**/*', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          themes = gulp.src('src/themes/**/*', {\n            base: 'src/'\n          }).pipe(gulp.dest(outputDirectory));\n          return mergeStream(definitions, themeImport, themeConfig, siteTheme, themes);\n        });\n      } // extend package.json\n\n\n      gulp.task(task.package, function () {\n        return gulp.src(packageFile).pipe(plumber()).pipe(jsonEditor(function (package) {\n          if (version) {\n            package.version = version;\n          }\n\n          return package;\n        })).pipe(gulp.dest(outputDirectory));\n      });\n      tasks.push(task.meteor);\n      tasks.push(task.repo);\n      tasks.push(task.package);\n    })(distribution);\n  }\n\n  runSequence(tasks, callback);\n};","map":{"version":3,"sources":["semantic/tasks/admin/distributions/create.js"],"names":["gulp","require","console","del","fs","path","runSequence","mergeStream","concatFileNames","debug","flatten","git","jsonEditor","plumber","rename","replace","tap","config","release","project","version","output","paths","module","exports","callback","stream","index","tasks","distributions","distribution","distLowerCase","toLowerCase","outputDirectory","join","outputRoot","packageFile","files","npm","repoName","distRepoRoot","regExp","match","task","all","repo","meteor","package","gatherFiles","createList","dir","resolve","list","readdirSync","omitted","forEach","file","isOmitted","indexOf","filePath","stat","statSync","isDirectory","concat","push","sep","filenames","length","src","templates","pipe","dest","themes","components","releases","base","definitions","themeImport","themeConfig","siteTheme"],"mappings":"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","sourcesContent":["/*******************************\n     Create Distributions\n*******************************/\n\n/*\n This will create individual distribution repositories for each SUI distribution\n\n  * copy distribution files to release\n  * update package.json file\n*/\n\nvar\n  gulp            = require('gulp'),\n\n  // node dependencies\n  console         = require('better-console'),\n  del             = require('del'),\n  fs              = require('fs'),\n  path            = require('path'),\n  runSequence     = require('run-sequence'),\n  mergeStream     = require('merge-stream'),\n\n  // admin dependencies\n  concatFileNames = require('gulp-concat-filenames'),\n  debug           = require('gulp-debug'),\n  flatten         = require('gulp-flatten'),\n  git             = require('gulp-git'),\n  jsonEditor      = require('gulp-json-editor'),\n  plumber         = require('gulp-plumber'),\n  rename          = require('gulp-rename'),\n  replace         = require('gulp-replace'),\n  tap             = require('gulp-tap'),\n\n  // config\n  config          = require('../../config/user'),\n  release         = require('../../config/admin/release'),\n  project         = require('../../config/project/release'),\n\n  // shorthand\n  version         = project.version,\n  output          = config.paths.output\n\n;\n\n\nmodule.exports = function(callback) {\n  var\n    stream,\n    index,\n    tasks = []\n  ;\n\n  for(index in release.distributions) {\n\n    var\n      distribution = release.distributions[index]\n    ;\n\n    // streams... designed to save time and make coding fun...\n    (function(distribution) {\n\n      var\n        distLowerCase   = distribution.toLowerCase(),\n        outputDirectory = path.join(release.outputRoot, distLowerCase),\n        packageFile     = path.join(outputDirectory, release.files.npm),\n        repoName        = release.distRepoRoot + distribution,\n        regExp          = {\n          match : {\n            files   : '{files}',\n            version : '{version}'\n          }\n        },\n        task = {\n          all     : distribution + ' copying files',\n          repo    : distribution + ' create repo',\n          meteor  : distribution + ' create meteor package.js',\n          package : distribution + ' create package.json'\n        },\n        gatherFiles,\n        createList\n      ;\n\n      // get files for meteor\n      gatherFiles = function(dir) {\n        var\n          dir   = dir || path.resolve('.'),\n          list  = fs.readdirSync(dir),\n          omitted = [\n            '.git',\n            'node_modules',\n            'package.js',\n            'LICENSE',\n            'README.md',\n            'package.json',\n            'bower.json',\n            '.gitignore'\n          ],\n          files = []\n        ;\n        list.forEach(function(file) {\n          var\n            isOmitted = (omitted.indexOf(file) > -1),\n            filePath  = path.join(dir, file),\n            stat      = fs.statSync(filePath)\n          ;\n          if(!isOmitted) {\n            if(stat && stat.isDirectory()) {\n              files = files.concat(gatherFiles(filePath));\n            }\n            else {\n              files.push(filePath.replace(outputDirectory + path.sep, ''));\n            }\n          }\n        });\n        return files;\n      };\n\n      // spaces out list correctly\n      createList = function(files) {\n        var filenames = '';\n        for(var file in files) {\n          if(file == (files.length - 1) ) {\n            filenames += \"'\" + files[file] + \"'\";\n          }\n          else {\n            filenames += \"'\" + files[file] + \"',\\n    \";\n          }\n        }\n        return filenames;\n      };\n\n\n      gulp.task(task.meteor, function() {\n        var\n          files     = gatherFiles(outputDirectory),\n          filenames = createList(files)\n        ;\n        gulp.src(release.templates.meteor[distLowerCase])\n          .pipe(plumber())\n          .pipe(flatten())\n          .pipe(replace(regExp.match.version, version))\n          .pipe(replace(regExp.match.files, filenames))\n          .pipe(rename(release.files.meteor))\n          .pipe(gulp.dest(outputDirectory))\n        ;\n      });\n\n      if(distribution == 'CSS') {\n        gulp.task(task.repo, function() {\n          var\n            themes,\n            components,\n            releases\n          ;\n          themes = gulp.src('dist/themes/default/**/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          components = gulp.src('dist/components/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          releases = gulp.src('dist/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          return mergeStream(themes, components, releases);\n        });\n      }\n      else if(distribution == 'LESS') {\n        gulp.task(task.repo, function() {\n          var\n            definitions,\n            themeImport,\n            themeConfig,\n            siteTheme,\n            themes\n          ;\n          definitions = gulp.src('src/definitions/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeImport = gulp.src('src/semantic.less', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeImport = gulp.src('src/theme.less', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeConfig = gulp.src('src/theme.config.example', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          siteTheme = gulp.src('src/_site/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themes = gulp.src('src/themes/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          return mergeStream(definitions, themeImport, themeConfig, siteTheme, themes);\n        });\n      }\n\n      // extend package.json\n      gulp.task(task.package, function() {\n        return gulp.src(packageFile)\n          .pipe(plumber())\n          .pipe(jsonEditor(function(package) {\n            if(version) {\n              package.version = version;\n            }\n            return package;\n          }))\n          .pipe(gulp.dest(outputDirectory))\n        ;\n      });\n\n      tasks.push(task.meteor);\n      tasks.push(task.repo);\n      tasks.push(task.package);\n\n    })(distribution);\n  }\n  runSequence(tasks, callback);\n};"]},"sourceType":"script","hash":"9cb692a8fb709f999d2c3b8f040f241fefc5f1f4"}
